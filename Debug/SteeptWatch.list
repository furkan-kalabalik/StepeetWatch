
SteeptWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e74  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008024  08008024  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008024  08008024  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008024  08008024  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800802c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000159c  20000098  080080c4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001634  080080c4  00021634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c4b  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e2  00000000  00000000  00036d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00039ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a688  00000000  00000000  0003c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015901  00000000  00000000  00056bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a19  00000000  00000000  0006c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  00104f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08007198 	.word	0x08007198

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08007198 	.word	0x08007198

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__gesf2>:
 8000ce4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ce8:	e006      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cea:	bf00      	nop

08000cec <__lesf2>:
 8000cec:	f04f 0c01 	mov.w	ip, #1
 8000cf0:	e002      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__cmpsf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d011      	beq.n	8000d34 <__cmpsf2+0x40>
 8000d10:	b001      	add	sp, #4
 8000d12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d16:	bf18      	it	ne
 8000d18:	ea90 0f01 	teqne	r0, r1
 8000d1c:	bf58      	it	pl
 8000d1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d22:	bf88      	it	hi
 8000d24:	17c8      	asrhi	r0, r1, #31
 8000d26:	bf38      	it	cc
 8000d28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d2c:	bf18      	it	ne
 8000d2e:	f040 0001 	orrne.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	d102      	bne.n	8000d40 <__cmpsf2+0x4c>
 8000d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d3e:	d105      	bne.n	8000d4c <__cmpsf2+0x58>
 8000d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d44:	d1e4      	bne.n	8000d10 <__cmpsf2+0x1c>
 8000d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4a:	d0e1      	beq.n	8000d10 <__cmpsf2+0x1c>
 8000d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <__aeabi_cfrcmple>:
 8000d54:	4684      	mov	ip, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4661      	mov	r1, ip
 8000d5a:	e7ff      	b.n	8000d5c <__aeabi_cfcmpeq>

08000d5c <__aeabi_cfcmpeq>:
 8000d5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d5e:	f7ff ffc9 	bl	8000cf4 <__cmpsf2>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	bf48      	it	mi
 8000d66:	f110 0f00 	cmnmi.w	r0, #0
 8000d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d6c <__aeabi_fcmpeq>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff fff4 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d74:	bf0c      	ite	eq
 8000d76:	2001      	moveq	r0, #1
 8000d78:	2000      	movne	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmplt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffea 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmple>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffe0 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpge>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffd2 	bl	8000d54 <__aeabi_cfrcmple>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmpgt>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffc8 	bl	8000d54 <__aeabi_cfrcmple>
 8000dc4:	bf34      	ite	cc
 8000dc6:	2001      	movcc	r0, #1
 8000dc8:	2000      	movcs	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <vApplicationGetIdleTaskMemory+0x28>)
 8000de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	200000b4 	.word	0x200000b4
 8000dfc:	20000108 	.word	0x20000108

08000e00 <MPU6050_Init>:
char bpm_buf[10] = {0};
char step_buf[10] = {0};


void MPU6050_Init (void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af04      	add	r7, sp, #16
	uint8_t is_operating;
	uint8_t config_data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &is_operating, 1, 1000);
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2301      	movs	r3, #1
 8000e16:	2275      	movs	r2, #117	; 0x75
 8000e18:	21d0      	movs	r1, #208	; 0xd0
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <MPU6050_Init+0xa8>)
 8000e1c:	f002 fa5c 	bl	80032d8 <HAL_I2C_Mem_Read>

	if (is_operating == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b68      	cmp	r3, #104	; 0x68
 8000e24:	d13b      	bne.n	8000e9e <MPU6050_Init+0x9e>
	{
		config_data = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&config_data, 1, 1000);
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	9302      	str	r3, [sp, #8]
 8000e30:	2301      	movs	r3, #1
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	226b      	movs	r2, #107	; 0x6b
 8000e3c:	21d0      	movs	r1, #208	; 0xd0
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <MPU6050_Init+0xa8>)
 8000e40:	f002 f950 	bl	80030e4 <HAL_I2C_Mem_Write>

		config_data = 0x07;
 8000e44:	2307      	movs	r3, #7
 8000e46:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &config_data, 1, 1000);
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2301      	movs	r3, #1
 8000e58:	2219      	movs	r2, #25
 8000e5a:	21d0      	movs	r1, #208	; 0xd0
 8000e5c:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <MPU6050_Init+0xa8>)
 8000e5e:	f002 f941 	bl	80030e4 <HAL_I2C_Mem_Write>

		config_data = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &config_data, 1, 1000);
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	1dbb      	adds	r3, r7, #6
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2301      	movs	r3, #1
 8000e76:	221c      	movs	r2, #28
 8000e78:	21d0      	movs	r1, #208	; 0xd0
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <MPU6050_Init+0xa8>)
 8000e7c:	f002 f932 	bl	80030e4 <HAL_I2C_Mem_Write>

		config_data = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &config_data, 1, 1000);
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	1dbb      	adds	r3, r7, #6
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	221b      	movs	r2, #27
 8000e96:	21d0      	movs	r1, #208	; 0xd0
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MPU6050_Init+0xa8>)
 8000e9a:	f002 f923 	bl	80030e4 <HAL_I2C_Mem_Write>
	}

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001548 	.word	0x20001548

08000eac <MPU6050_Read_Acc>:


void MPU6050_Read_Acc (void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af04      	add	r7, sp, #16
	uint8_t data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	2306      	movs	r3, #6
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	223b      	movs	r2, #59	; 0x3b
 8000ec4:	21d0      	movs	r1, #208	; 0xd0
 8000ec6:	482f      	ldr	r0, [pc, #188]	; (8000f84 <MPU6050_Read_Acc+0xd8>)
 8000ec8:	f002 fa06 	bl	80032d8 <HAL_I2C_Mem_Read>

	acc_x_raw = (int16_t)(data[0] << 8 | data [1]);
 8000ecc:	783b      	ldrb	r3, [r7, #0]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MPU6050_Read_Acc+0xdc>)
 8000edc:	801a      	strh	r2, [r3, #0]
	acc_y_raw = (int16_t)(data[2] << 8 | data [3]);
 8000ede:	78bb      	ldrb	r3, [r7, #2]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MPU6050_Read_Acc+0xe0>)
 8000eee:	801a      	strh	r2, [r3, #0]
	acc_z_raw = (int16_t)(data[4] << 8 | data [5]);
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	797b      	ldrb	r3, [r7, #5]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MPU6050_Read_Acc+0xe4>)
 8000f00:	801a      	strh	r2, [r3, #0]

	ax = acc_x_raw/16384.0;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MPU6050_Read_Acc+0xdc>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa73 	bl	80003f4 <__aeabi_i2d>
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MPU6050_Read_Acc+0xe8>)
 8000f14:	f7ff fc02 	bl	800071c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd82 	bl	8000a28 <__aeabi_d2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <MPU6050_Read_Acc+0xec>)
 8000f28:	6013      	str	r3, [r2, #0]
	ay = acc_y_raw/16384.0;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MPU6050_Read_Acc+0xe0>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fa5f 	bl	80003f4 <__aeabi_i2d>
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MPU6050_Read_Acc+0xe8>)
 8000f3c:	f7ff fbee 	bl	800071c <__aeabi_ddiv>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fd6e 	bl	8000a28 <__aeabi_d2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MPU6050_Read_Acc+0xf0>)
 8000f50:	6013      	str	r3, [r2, #0]
	az = acc_z_raw/16384.0;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MPU6050_Read_Acc+0xe4>)
 8000f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fa4b 	bl	80003f4 <__aeabi_i2d>
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MPU6050_Read_Acc+0xe8>)
 8000f64:	f7ff fbda 	bl	800071c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fd5a 	bl	8000a28 <__aeabi_d2f>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <MPU6050_Read_Acc+0xf4>)
 8000f78:	6013      	str	r3, [r2, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20001548 	.word	0x20001548
 8000f88:	20000316 	.word	0x20000316
 8000f8c:	20000318 	.word	0x20000318
 8000f90:	2000031a 	.word	0x2000031a
 8000f94:	40d00000 	.word	0x40d00000
 8000f98:	200015f8 	.word	0x200015f8
 8000f9c:	2000161c 	.word	0x2000161c
 8000fa0:	200015a8 	.word	0x200015a8

08000fa4 <accelometer_task_func>:
	gy = gyro_y_raw/131.0;
	gz = gyro_z_raw/131.0;
}

void accelometer_task_func()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	while(1)
	{
		MPU6050_Read_Acc();
 8000fa8:	f7ff ff80 	bl	8000eac <MPU6050_Read_Acc>
		curr_vec = sqrt((acc_x_raw*acc_x_raw)+(acc_y_raw*acc_y_raw)+(acc_z_raw*acc_z_raw));
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <accelometer_task_func+0xac>)
 8000fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <accelometer_task_func+0xac>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	fb03 f202 	mul.w	r2, r3, r2
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <accelometer_task_func+0xb0>)
 8000fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <accelometer_task_func+0xb0>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	fb03 f301 	mul.w	r3, r3, r1
 8000fd0:	441a      	add	r2, r3
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <accelometer_task_func+0xb4>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <accelometer_task_func+0xb4>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	fb03 f301 	mul.w	r3, r3, r1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa04 	bl	80003f4 <__aeabi_i2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f005 fff8 	bl	8006fe8 <sqrt>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fd12 	bl	8000a28 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <accelometer_task_func+0xb8>)
 8001008:	6013      	str	r3, [r2, #0]
		total_vec = curr_vec - prev_vec;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <accelometer_task_func+0xb8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <accelometer_task_func+0xbc>)
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd5b 	bl	8000ad0 <__aeabi_fsub>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <accelometer_task_func+0xc0>)
 8001020:	601a      	str	r2, [r3, #0]
		if(total_vec > 625)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <accelometer_task_func+0xc0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4910      	ldr	r1, [pc, #64]	; (8001068 <accelometer_task_func+0xc4>)
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fec7 	bl	8000dbc <__aeabi_fcmpgt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <accelometer_task_func+0x9a>
			step_count += 1;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <accelometer_task_func+0xc8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <accelometer_task_func+0xc8>)
 800103c:	6013      	str	r3, [r2, #0]
		prev_vec = curr_vec;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <accelometer_task_func+0xb8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <accelometer_task_func+0xbc>)
 8001044:	6013      	str	r3, [r2, #0]
		osDelay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104a:	f004 f9d7 	bl	80053fc <osDelay>
		MPU6050_Read_Acc();
 800104e:	e7ab      	b.n	8000fa8 <accelometer_task_func+0x4>
 8001050:	20000316 	.word	0x20000316
 8001054:	20000318 	.word	0x20000318
 8001058:	2000031a 	.word	0x2000031a
 800105c:	200015a0 	.word	0x200015a0
 8001060:	200015f4 	.word	0x200015f4
 8001064:	20001614 	.word	0x20001614
 8001068:	441c4000 	.word	0x441c4000
 800106c:	2000031c 	.word	0x2000031c

08001070 <bpm_task_func>:
	}
}

void bpm_task_func()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

	while(1)
	{
		if(beat_detected)
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <bpm_task_func+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0fb      	beq.n	8001074 <bpm_task_func+0x4>
		{
			beat_detected = false;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <bpm_task_func+0x1c>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
			osDelay(20);
 8001082:	2014      	movs	r0, #20
 8001084:	f004 f9ba 	bl	80053fc <osDelay>
		if(beat_detected)
 8001088:	e7f4      	b.n	8001074 <bpm_task_func+0x4>
 800108a:	bf00      	nop
 800108c:	20000309 	.word	0x20000309

08001090 <display_task_func>:
		}
	}
}

void display_task_func()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

	while(1)
	{
		sprintf(bpm_buf, "%-5d", bpm);
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <display_task_func+0x54>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4913      	ldr	r1, [pc, #76]	; (80010e8 <display_task_func+0x58>)
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <display_task_func+0x5c>)
 800109e:	f005 fb77 	bl	8006790 <siprintf>
		sprintf(step_buf, "%-5d", step_count);
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <display_task_func+0x60>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	490f      	ldr	r1, [pc, #60]	; (80010e8 <display_task_func+0x58>)
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <display_task_func+0x64>)
 80010ac:	f005 fb70 	bl	8006790 <siprintf>
		SSD1306_GotoXY(0, 40);
 80010b0:	2128      	movs	r1, #40	; 0x28
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fd00 	bl	8001ab8 <SSD1306_GotoXY>
		SSD1306_Puts(bpm_buf, &Font_11x18, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	490f      	ldr	r1, [pc, #60]	; (80010f8 <display_task_func+0x68>)
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <display_task_func+0x5c>)
 80010be:	f000 fd91 	bl	8001be4 <SSD1306_Puts>
		SSD1306_GotoXY(70, 40);
 80010c2:	2128      	movs	r1, #40	; 0x28
 80010c4:	2046      	movs	r0, #70	; 0x46
 80010c6:	f000 fcf7 	bl	8001ab8 <SSD1306_GotoXY>
		SSD1306_Puts(step_buf, &Font_11x18, 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	490a      	ldr	r1, [pc, #40]	; (80010f8 <display_task_func+0x68>)
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <display_task_func+0x64>)
 80010d0:	f000 fd88 	bl	8001be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80010d4:	f000 fc4c 	bl	8001970 <SSD1306_UpdateScreen>
		osDelay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f004 f98e 	bl	80053fc <osDelay>
		sprintf(bpm_buf, "%-5d", bpm);
 80010e0:	e7d8      	b.n	8001094 <display_task_func+0x4>
 80010e2:	bf00      	nop
 80010e4:	20001604 	.word	0x20001604
 80010e8:	080071dc 	.word	0x080071dc
 80010ec:	20000320 	.word	0x20000320
 80010f0:	2000031c 	.word	0x2000031c
 80010f4:	2000032c 	.word	0x2000032c
 80010f8:	20000000 	.word	0x20000000

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b09c      	sub	sp, #112	; 0x70
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 ffa3 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f8b9 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 f9ef 	bl	80014ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800110e:	f000 f943 	bl	8001398 <MX_I2C1_Init>
  MX_ADC2_Init();
 8001112:	f000 f903 	bl	800131c <MX_ADC2_Init>
  MX_TIM3_Init();
 8001116:	f000 f99b 	bl	8001450 <MX_TIM3_Init>
  MX_I2C2_Init();
 800111a:	f000 f96b 	bl	80013f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800111e:	f7ff fe6f 	bl	8000e00 <MPU6050_Init>
  SSD1306_Init();
 8001122:	f000 fb61 	bl	80017e8 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001126:	4848      	ldr	r0, [pc, #288]	; (8001248 <main+0x14c>)
 8001128:	f003 fd54 	bl	8004bd4 <HAL_TIM_Base_Start_IT>
	SSD1306_GotoXY(0, 0);
 800112c:	2100      	movs	r1, #0
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fcc2 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("BPM", &Font_11x18, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	4945      	ldr	r1, [pc, #276]	; (800124c <main+0x150>)
 8001138:	4845      	ldr	r0, [pc, #276]	; (8001250 <main+0x154>)
 800113a:	f000 fd53 	bl	8001be4 <SSD1306_Puts>

	SSD1306_GotoXY(70, 0);
 800113e:	2100      	movs	r1, #0
 8001140:	2046      	movs	r0, #70	; 0x46
 8001142:	f000 fcb9 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("STEP", &Font_11x18, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	4940      	ldr	r1, [pc, #256]	; (800124c <main+0x150>)
 800114a:	4842      	ldr	r0, [pc, #264]	; (8001254 <main+0x158>)
 800114c:	f000 fd4a 	bl	8001be4 <SSD1306_Puts>

	SSD1306_GotoXY(58, 0);
 8001150:	2100      	movs	r1, #0
 8001152:	203a      	movs	r0, #58	; 0x3a
 8001154:	f000 fcb0 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("|", &Font_11x18, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	493c      	ldr	r1, [pc, #240]	; (800124c <main+0x150>)
 800115c:	483e      	ldr	r0, [pc, #248]	; (8001258 <main+0x15c>)
 800115e:	f000 fd41 	bl	8001be4 <SSD1306_Puts>
	SSD1306_GotoXY(58, 18);
 8001162:	2112      	movs	r1, #18
 8001164:	203a      	movs	r0, #58	; 0x3a
 8001166:	f000 fca7 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("|", &Font_11x18, 1);
 800116a:	2201      	movs	r2, #1
 800116c:	4937      	ldr	r1, [pc, #220]	; (800124c <main+0x150>)
 800116e:	483a      	ldr	r0, [pc, #232]	; (8001258 <main+0x15c>)
 8001170:	f000 fd38 	bl	8001be4 <SSD1306_Puts>
	SSD1306_GotoXY(58, 36);
 8001174:	2124      	movs	r1, #36	; 0x24
 8001176:	203a      	movs	r0, #58	; 0x3a
 8001178:	f000 fc9e 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("|", &Font_11x18, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	4933      	ldr	r1, [pc, #204]	; (800124c <main+0x150>)
 8001180:	4835      	ldr	r0, [pc, #212]	; (8001258 <main+0x15c>)
 8001182:	f000 fd2f 	bl	8001be4 <SSD1306_Puts>
	SSD1306_GotoXY(58, 54);
 8001186:	2136      	movs	r1, #54	; 0x36
 8001188:	203a      	movs	r0, #58	; 0x3a
 800118a:	f000 fc95 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("|", &Font_11x18, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	492e      	ldr	r1, [pc, #184]	; (800124c <main+0x150>)
 8001192:	4831      	ldr	r0, [pc, #196]	; (8001258 <main+0x15c>)
 8001194:	f000 fd26 	bl	8001be4 <SSD1306_Puts>
	SSD1306_GotoXY(58, 72);
 8001198:	2148      	movs	r1, #72	; 0x48
 800119a:	203a      	movs	r0, #58	; 0x3a
 800119c:	f000 fc8c 	bl	8001ab8 <SSD1306_GotoXY>
	SSD1306_Puts("|", &Font_11x18, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	492a      	ldr	r1, [pc, #168]	; (800124c <main+0x150>)
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <main+0x15c>)
 80011a6:	f000 fd1d 	bl	8001be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80011aa:	f000 fbe1 	bl	8001970 <SSD1306_UpdateScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <main+0x160>)
 80011b0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f8cb 	bl	8005364 <osThreadCreate>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a23      	ldr	r2, [pc, #140]	; (8001260 <main+0x164>)
 80011d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of bpmTask */
  osThreadDef(bpmTask, bpm_task_func, osPriorityIdle, 0, 128);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <main+0x168>)
 80011d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bpmTaskHandle = osThreadCreate(osThread(bpmTask), NULL);
 80011e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f8b8 	bl	8005364 <osThreadCreate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <main+0x16c>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of stepTask */
  osThreadDef(stepTask, accelometer_task_func, osPriorityNormal, 0, 128);
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <main+0x170>)
 80011fc:	f107 041c 	add.w	r4, r7, #28
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stepTaskHandle = osThreadCreate(osThread(stepTask), NULL);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f8a5 	bl	8005364 <osThreadCreate>
 800121a:	4603      	mov	r3, r0
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <main+0x174>)
 800121e:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, display_task_func, osPriorityNormal, 0, 128);
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <main+0x178>)
 8001222:	463c      	mov	r4, r7
 8001224:	461d      	mov	r5, r3
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001232:	463b      	mov	r3, r7
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f004 f894 	bl	8005364 <osThreadCreate>
 800123c:	4603      	mov	r3, r0
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <main+0x17c>)
 8001240:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001242:	f004 f888 	bl	8005356 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x14a>
 8001248:	200015ac 	.word	0x200015ac
 800124c:	20000000 	.word	0x20000000
 8001250:	080071e4 	.word	0x080071e4
 8001254:	080071e8 	.word	0x080071e8
 8001258:	080071f0 	.word	0x080071f0
 800125c:	080071f4 	.word	0x080071f4
 8001260:	200014c0 	.word	0x200014c0
 8001264:	08007210 	.word	0x08007210
 8001268:	20001608 	.word	0x20001608
 800126c:	0800722c 	.word	0x0800722c
 8001270:	20001610 	.word	0x20001610
 8001274:	08007248 	.word	0x08007248
 8001278:	2000159c 	.word	0x2000159c

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f005 fa78 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 ff7b 	bl	80041bc <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012cc:	f000 fa86 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f9e6 	bl	80046bc <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012f6:	f000 fa71 	bl	80017dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012fa:	2302      	movs	r3, #2
 80012fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fb5f 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001310:	f000 fa64 	bl	80017dc <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	3750      	adds	r7, #80	; 0x50
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_ADC2_Init+0x74>)
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <MX_ADC2_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_ADC2_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC2_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_ADC2_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_ADC2_Init+0x74>)
 8001346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800134a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_ADC2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_ADC2_Init+0x74>)
 8001354:	2201      	movs	r2, #1
 8001356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_ADC2_Init+0x74>)
 800135a:	f000 fed9 	bl	8002110 <HAL_ADC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 fa3a 	bl	80017dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001368:	2302      	movs	r3, #2
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001370:	2303      	movs	r3, #3
 8001372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_ADC2_Init+0x74>)
 800137a:	f001 f85b 	bl	8002434 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001384:	f000 fa2a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200014c4 	.word	0x200014c4
 8001394:	40012800 	.word	0x40012800

08001398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C1_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d6:	f001 fc43 	bl	8002c60 <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 f9fc 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200014f4 	.word	0x200014f4
 80013ec:	40005400 	.word	0x40005400
 80013f0:	00061a80 	.word	0x00061a80

080013f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C2_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C2_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C2_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C2_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C2_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C2_Init+0x50>)
 8001432:	f001 fc15 	bl	8002c60 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 f9ce 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20001548 	.word	0x20001548
 8001448:	40005800 	.word	0x40005800
 800144c:	000186a0 	.word	0x000186a0

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_TIM3_Init+0x94>)
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <MX_TIM3_Init+0x98>)
 8001470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001474:	2207      	movs	r2, #7
 8001476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_TIM3_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001480:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_TIM3_Init+0x94>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001494:	f003 fb4e 	bl	8004b34 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800149e:	f000 f99d 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_TIM3_Init+0x94>)
 80014b0:	f003 fcea 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ba:	f000 f98f 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM3_Init+0x94>)
 80014cc:	f003 febc 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014d6:	f000 f981 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200015ac 	.word	0x200015ac
 80014e8:	40000400 	.word	0x40000400

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_GPIO_Init+0x58>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <MX_GPIO_Init+0x58>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_GPIO_Init+0x58>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_GPIO_Init+0x58>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <MX_GPIO_Init+0x58>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_GPIO_Init+0x58>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_GPIO_Init+0x58>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <MX_GPIO_Init+0x58>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <MX_GPIO_Init+0x58>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	unsigned int runningTotal;
	if(htim->Instance==htim3.Instance)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b8a      	ldr	r3, [pc, #552]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 810e 	bne.w	800177a <HAL_TIM_PeriodElapsedCallback+0x232>
	{
		signal=HAL_ADC_GetValue(&hadc2)>>2;					 // read the Pulse Sensor
 800155e:	4889      	ldr	r0, [pc, #548]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001560:	f000 ff5c 	bl	800241c <HAL_ADC_GetValue>
 8001564:	4603      	mov	r3, r0
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	461a      	mov	r2, r3
 800156a:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800156c:	601a      	str	r2, [r3, #0]
		sampleCounter += 2;                         // keep track of the time in mS with this variable
 800156e:	4b87      	ldr	r3, [pc, #540]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3302      	adds	r3, #2
 8001574:	4a85      	ldr	r2, [pc, #532]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001576:	6013      	str	r3, [r2, #0]
		num = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
 8001578:	4b84      	ldr	r3, [pc, #528]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4b83      	ldr	r3, [pc, #524]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001586:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc2);									//restart ADC conversion
 8001588:	487e      	ldr	r0, [pc, #504]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800158a:	f000 fe99 	bl	80022c0 <HAL_ADC_Start>

		//  find the peak and trough of the pulse wave
		if(signal < thresh && num > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
 800158e:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	da18      	bge.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x84>
 800159a:	4b80      	ldr	r3, [pc, #512]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a80      	ldr	r2, [pc, #512]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015a0:	fb82 1203 	smull	r1, r2, r2, r3
 80015a4:	1052      	asrs	r2, r2, #1
 80015a6:	17db      	asrs	r3, r3, #31
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	441a      	add	r2, r3
 80015b0:	4b78      	ldr	r3, [pc, #480]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	da09      	bge.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x84>
			if (signal < T){                        // T is the trough
 80015b8:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	da03      	bge.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x84>
				T = signal;                         // keep track of lowest point in pulse wave
 80015c4:	4b70      	ldr	r3, [pc, #448]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a76      	ldr	r2, [pc, #472]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015ca:	6013      	str	r3, [r2, #0]
			}
		}

		if(signal > thresh && signal > P){          // thresh condition helps avoid noise
 80015cc:	4b6e      	ldr	r3, [pc, #440]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b71      	ldr	r3, [pc, #452]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dd09      	ble.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xa4>
 80015d8:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dd03      	ble.n	80015ec <HAL_TIM_PeriodElapsedCallback+0xa4>
			P = signal;                             // P is the peak
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6f      	ldr	r2, [pc, #444]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015ea:	6013      	str	r3, [r2, #0]
		}                                        // keep track of highest point in pulse wave

		//  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
		// signal surges up in value every time there is a pulse
		if (num > 250){                                   // avoid high frequency noise
 80015ec:	4b69      	ldr	r3, [pc, #420]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2bfa      	cmp	r3, #250	; 0xfa
 80015f2:	dd7f      	ble.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			if ( (signal > thresh) && (pulse == false) && (num > (IBI/5)*3) ){
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dd79      	ble.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d175      	bne.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a64      	ldr	r2, [pc, #400]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800160e:	fb82 1203 	smull	r1, r2, r2, r3
 8001612:	1052      	asrs	r2, r2, #1
 8001614:	17db      	asrs	r3, r3, #31
 8001616:	1ad2      	subs	r2, r2, r3
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	441a      	add	r2, r3
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	da66      	bge.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
				pulse = true;                               // set the Pulse flag when we think there is a pulse
 8001626:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
				IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b57      	ldr	r3, [pc, #348]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	461a      	mov	r2, r3
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800163a:	601a      	str	r2, [r3, #0]
				lastBeatTime = sampleCounter;               // keep track of time for next pulse
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a53      	ldr	r2, [pc, #332]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001642:	6013      	str	r3, [r2, #0]

				if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
 8001644:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d011      	beq.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x128>
					secondBeat = false;                  // clear secondBeat flag
 800164c:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
					for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e008      	b.n	800166a <HAL_TIM_PeriodElapsedCallback+0x122>
						rate[i] = IBI;
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4955      	ldr	r1, [pc, #340]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	3301      	adds	r3, #1
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b09      	cmp	r3, #9
 800166e:	ddf3      	ble.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x110>
					}
				}

				if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TRUE
 8001670:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x13e>
					firstBeat = false;                   // clear firstBeat flag
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
					secondBeat = true;                   // set the second beat flag
 800167e:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
					return;                              // IBI value is unreliable so discard it
 8001684:	e079      	b.n	800177a <HAL_TIM_PeriodElapsedCallback+0x232>
				}


				// keep a running total of the last 10 IBI values
				runningTotal = 0;                  // clear the runningTotal variable
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]

				for(int i=0; i<=8; i++){                // shift data in the rate array
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e013      	b.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0x170>
					rate[i] = rate[i+1];                  // and drop the oldest IBI value
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	4a47      	ldr	r2, [pc, #284]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800169a:	4946      	ldr	r1, [pc, #280]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					runningTotal += rate[i];              // add up the 9 oldest IBI values
 80016a2:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	461a      	mov	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
				for(int i=0; i<=8; i++){                // shift data in the rate array
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	dde8      	ble.n	8001690 <HAL_TIM_PeriodElapsedCallback+0x148>
				}

				rate[9] = IBI;                          // add the latest IBI to the rate array
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016c4:	6253      	str	r3, [r2, #36]	; 0x24
				runningTotal += rate[9];                // add the latest IBI to runningTotal
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	461a      	mov	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
				runningTotal /= 10;                     // average the last 10 IBI values
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4a39      	ldr	r2, [pc, #228]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	617b      	str	r3, [r7, #20]
				bpm = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
 80016de:	f64e 2260 	movw	r2, #60000	; 0xea60
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80016ec:	601a      	str	r2, [r3, #0]
				beat_detected = true;                              // set beat_detected flag
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
			}
		}

		if (signal < thresh && pulse == true){   // when the values are going down, the beat is over
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	da20      	bge.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x1fa>
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d11c      	bne.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x1fa>
			pulse = false;                         // reset the Pulse flag so we can do it again
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x264>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
			amp = P - T;                           // get amplitude of the pulse wave
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800171a:	6013      	str	r3, [r2, #0]
			thresh = amp/2 + T;                    // set thresh at 50% of the amplitude
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0fda      	lsrs	r2, r3, #31
 8001722:	4413      	add	r3, r2
 8001724:	105b      	asrs	r3, r3, #1
 8001726:	461a      	mov	r2, r3
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4413      	add	r3, r2
 800172e:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001730:	6013      	str	r3, [r2, #0]
			P = thresh;                            // reset these for next time
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001738:	6013      	str	r3, [r2, #0]
			T = thresh;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001740:	6013      	str	r3, [r2, #0]
		}

		if (num > 2500){                           // if 2.5 seconds go by without a beat
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800174a:	4293      	cmp	r3, r2
 800174c:	dd15      	ble.n	800177a <HAL_TIM_PeriodElapsedCallback+0x232>
			thresh = 512;                          // set thresh default
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	601a      	str	r2, [r3, #0]
			P = 512;                               // set P default
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175c:	601a      	str	r2, [r3, #0]
			T = 512;                               // set T default
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]
			lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800176c:	6013      	str	r3, [r2, #0]
			firstBeat = true;                      // set these to avoid noise
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
			secondBeat = false;                    // when we get the heartbeat back
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200015ac 	.word	0x200015ac
 8001784:	200014c4 	.word	0x200014c4
 8001788:	200015fc 	.word	0x200015fc
 800178c:	2000030c 	.word	0x2000030c
 8001790:	20000310 	.word	0x20000310
 8001794:	20001600 	.word	0x20001600
 8001798:	20000014 	.word	0x20000014
 800179c:	20000008 	.word	0x20000008
 80017a0:	66666667 	.word	0x66666667
 80017a4:	20000010 	.word	0x20000010
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000308 	.word	0x20000308
 80017b0:	20000314 	.word	0x20000314
 80017b4:	20001498 	.word	0x20001498
 80017b8:	2000001c 	.word	0x2000001c
 80017bc:	cccccccd 	.word	0xcccccccd
 80017c0:	20001604 	.word	0x20001604
 80017c4:	20000309 	.word	0x20000309
 80017c8:	20000018 	.word	0x20000018

080017cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f003 fe11 	bl	80053fc <osDelay>
 80017da:	e7fb      	b.n	80017d4 <StartDefaultTask+0x8>

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80017ee:	f000 fa1f 	bl	8001c30 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80017f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017f6:	2201      	movs	r2, #1
 80017f8:	2178      	movs	r1, #120	; 0x78
 80017fa:	485b      	ldr	r0, [pc, #364]	; (8001968 <SSD1306_Init+0x180>)
 80017fc:	f001 ffd4 	bl	80037a8 <HAL_I2C_IsDeviceReady>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001806:	2300      	movs	r3, #0
 8001808:	e0a9      	b.n	800195e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800180a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800180e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001810:	e002      	b.n	8001818 <SSD1306_Init+0x30>
		p--;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3b01      	subs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f9      	bne.n	8001812 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800181e:	22ae      	movs	r2, #174	; 0xae
 8001820:	2100      	movs	r1, #0
 8001822:	2078      	movs	r0, #120	; 0x78
 8001824:	f000 fa60 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001828:	2220      	movs	r2, #32
 800182a:	2100      	movs	r1, #0
 800182c:	2078      	movs	r0, #120	; 0x78
 800182e:	f000 fa5b 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001832:	2210      	movs	r2, #16
 8001834:	2100      	movs	r1, #0
 8001836:	2078      	movs	r0, #120	; 0x78
 8001838:	f000 fa56 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800183c:	22b0      	movs	r2, #176	; 0xb0
 800183e:	2100      	movs	r1, #0
 8001840:	2078      	movs	r0, #120	; 0x78
 8001842:	f000 fa51 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001846:	22c8      	movs	r2, #200	; 0xc8
 8001848:	2100      	movs	r1, #0
 800184a:	2078      	movs	r0, #120	; 0x78
 800184c:	f000 fa4c 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2078      	movs	r0, #120	; 0x78
 8001856:	f000 fa47 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800185a:	2210      	movs	r2, #16
 800185c:	2100      	movs	r1, #0
 800185e:	2078      	movs	r0, #120	; 0x78
 8001860:	f000 fa42 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	2100      	movs	r1, #0
 8001868:	2078      	movs	r0, #120	; 0x78
 800186a:	f000 fa3d 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800186e:	2281      	movs	r2, #129	; 0x81
 8001870:	2100      	movs	r1, #0
 8001872:	2078      	movs	r0, #120	; 0x78
 8001874:	f000 fa38 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001878:	22ff      	movs	r2, #255	; 0xff
 800187a:	2100      	movs	r1, #0
 800187c:	2078      	movs	r0, #120	; 0x78
 800187e:	f000 fa33 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001882:	22a1      	movs	r2, #161	; 0xa1
 8001884:	2100      	movs	r1, #0
 8001886:	2078      	movs	r0, #120	; 0x78
 8001888:	f000 fa2e 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800188c:	22a6      	movs	r2, #166	; 0xa6
 800188e:	2100      	movs	r1, #0
 8001890:	2078      	movs	r0, #120	; 0x78
 8001892:	f000 fa29 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001896:	22a8      	movs	r2, #168	; 0xa8
 8001898:	2100      	movs	r1, #0
 800189a:	2078      	movs	r0, #120	; 0x78
 800189c:	f000 fa24 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	2100      	movs	r1, #0
 80018a4:	2078      	movs	r0, #120	; 0x78
 80018a6:	f000 fa1f 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018aa:	22a4      	movs	r2, #164	; 0xa4
 80018ac:	2100      	movs	r1, #0
 80018ae:	2078      	movs	r0, #120	; 0x78
 80018b0:	f000 fa1a 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80018b4:	22d3      	movs	r2, #211	; 0xd3
 80018b6:	2100      	movs	r1, #0
 80018b8:	2078      	movs	r0, #120	; 0x78
 80018ba:	f000 fa15 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2078      	movs	r0, #120	; 0x78
 80018c4:	f000 fa10 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80018c8:	22d5      	movs	r2, #213	; 0xd5
 80018ca:	2100      	movs	r1, #0
 80018cc:	2078      	movs	r0, #120	; 0x78
 80018ce:	f000 fa0b 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80018d2:	22f0      	movs	r2, #240	; 0xf0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2078      	movs	r0, #120	; 0x78
 80018d8:	f000 fa06 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80018dc:	22d9      	movs	r2, #217	; 0xd9
 80018de:	2100      	movs	r1, #0
 80018e0:	2078      	movs	r0, #120	; 0x78
 80018e2:	f000 fa01 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80018e6:	2222      	movs	r2, #34	; 0x22
 80018e8:	2100      	movs	r1, #0
 80018ea:	2078      	movs	r0, #120	; 0x78
 80018ec:	f000 f9fc 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80018f0:	22da      	movs	r2, #218	; 0xda
 80018f2:	2100      	movs	r1, #0
 80018f4:	2078      	movs	r0, #120	; 0x78
 80018f6:	f000 f9f7 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80018fa:	2212      	movs	r2, #18
 80018fc:	2100      	movs	r1, #0
 80018fe:	2078      	movs	r0, #120	; 0x78
 8001900:	f000 f9f2 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001904:	22db      	movs	r2, #219	; 0xdb
 8001906:	2100      	movs	r1, #0
 8001908:	2078      	movs	r0, #120	; 0x78
 800190a:	f000 f9ed 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800190e:	2220      	movs	r2, #32
 8001910:	2100      	movs	r1, #0
 8001912:	2078      	movs	r0, #120	; 0x78
 8001914:	f000 f9e8 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001918:	228d      	movs	r2, #141	; 0x8d
 800191a:	2100      	movs	r1, #0
 800191c:	2078      	movs	r0, #120	; 0x78
 800191e:	f000 f9e3 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001922:	2214      	movs	r2, #20
 8001924:	2100      	movs	r1, #0
 8001926:	2078      	movs	r0, #120	; 0x78
 8001928:	f000 f9de 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800192c:	22af      	movs	r2, #175	; 0xaf
 800192e:	2100      	movs	r1, #0
 8001930:	2078      	movs	r0, #120	; 0x78
 8001932:	f000 f9d9 	bl	8001ce8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001936:	222e      	movs	r2, #46	; 0x2e
 8001938:	2100      	movs	r1, #0
 800193a:	2078      	movs	r0, #120	; 0x78
 800193c:	f000 f9d4 	bl	8001ce8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f843 	bl	80019cc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001946:	f000 f813 	bl	8001970 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <SSD1306_Init+0x184>)
 800194c:	2200      	movs	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SSD1306_Init+0x184>)
 8001952:	2200      	movs	r2, #0
 8001954:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <SSD1306_Init+0x184>)
 8001958:	2201      	movs	r2, #1
 800195a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200014f4 	.word	0x200014f4
 800196c:	20000738 	.word	0x20000738

08001970 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e01d      	b.n	80019b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	3b50      	subs	r3, #80	; 0x50
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	2100      	movs	r1, #0
 8001986:	2078      	movs	r0, #120	; 0x78
 8001988:	f000 f9ae 	bl	8001ce8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2078      	movs	r0, #120	; 0x78
 8001992:	f000 f9a9 	bl	8001ce8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001996:	2210      	movs	r2, #16
 8001998:	2100      	movs	r1, #0
 800199a:	2078      	movs	r0, #120	; 0x78
 800199c:	f000 f9a4 	bl	8001ce8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	01db      	lsls	r3, r3, #7
 80019a4:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <SSD1306_UpdateScreen+0x58>)
 80019a6:	441a      	add	r2, r3
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	2078      	movs	r0, #120	; 0x78
 80019ae:	f000 f953 	bl	8001c58 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	3301      	adds	r3, #1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	d9de      	bls.n	800197c <SSD1306_UpdateScreen+0xc>
	}
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000338 	.word	0x20000338

080019cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <SSD1306_Fill+0x14>
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <SSD1306_Fill+0x16>
 80019e0:	23ff      	movs	r3, #255	; 0xff
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	4619      	mov	r1, r3
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <SSD1306_Fill+0x2c>)
 80019ea:	f004 fec9 	bl	8006780 <memset>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000338 	.word	0x20000338

080019fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
 8001a06:	460b      	mov	r3, r1
 8001a08:	80bb      	strh	r3, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	70fb      	strb	r3, [r7, #3]
	if (
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b7f      	cmp	r3, #127	; 0x7f
 8001a12:	d848      	bhi.n	8001aa6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	2b3f      	cmp	r3, #63	; 0x3f
 8001a18:	d845      	bhi.n	8001aa6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <SSD1306_DrawPixel+0xb4>)
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11a      	bne.n	8001a6c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	08db      	lsrs	r3, r3, #3
 8001a3c:	b298      	uxth	r0, r3
 8001a3e:	4603      	mov	r3, r0
 8001a40:	01db      	lsls	r3, r3, #7
 8001a42:	4413      	add	r3, r2
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <SSD1306_DrawPixel+0xb8>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b259      	sxtb	r1, r3
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	4603      	mov	r3, r0
 8001a60:	01db      	lsls	r3, r3, #7
 8001a62:	4413      	add	r3, r2
 8001a64:	b2c9      	uxtb	r1, r1
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <SSD1306_DrawPixel+0xb8>)
 8001a68:	54d1      	strb	r1, [r2, r3]
 8001a6a:	e01d      	b.n	8001aa8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	b298      	uxth	r0, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <SSD1306_DrawPixel+0xb8>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4013      	ands	r3, r2
 8001a94:	b259      	sxtb	r1, r3
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	01db      	lsls	r3, r3, #7
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2c9      	uxtb	r1, r1
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <SSD1306_DrawPixel+0xb8>)
 8001aa2:	54d1      	strb	r1, [r2, r3]
 8001aa4:	e000      	b.n	8001aa8 <SSD1306_DrawPixel+0xac>
		return;
 8001aa6:	bf00      	nop
	}
}
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000738 	.word	0x20000738
 8001ab4:	20000338 	.word	0x20000338

08001ab8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	80fb      	strh	r3, [r7, #6]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <SSD1306_GotoXY+0x28>)
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <SSD1306_GotoXY+0x28>)
 8001ad0:	88bb      	ldrh	r3, [r7, #4]
 8001ad2:	8053      	strh	r3, [r2, #2]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000738 	.word	0x20000738

08001ae4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
	if (
 8001b00:	2b7f      	cmp	r3, #127	; 0x7f
 8001b02:	dc07      	bgt.n	8001b14 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001b06:	885b      	ldrh	r3, [r3, #2]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b10:	2b3f      	cmp	r3, #63	; 0x3f
 8001b12:	dd01      	ble.n	8001b18 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e05e      	b.n	8001bd6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e04b      	b.n	8001bb6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	3b20      	subs	r3, #32
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	7849      	ldrb	r1, [r1, #1]
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4619      	mov	r1, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	440b      	add	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e030      	b.n	8001ba4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d010      	beq.n	8001b74 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001b54:	881a      	ldrh	r2, [r3, #0]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001b60:	885a      	ldrh	r2, [r3, #2]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	79ba      	ldrb	r2, [r7, #6]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff ff45 	bl	80019fc <SSD1306_DrawPixel>
 8001b72:	e014      	b.n	8001b9e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b298      	uxth	r0, r3
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001b82:	885a      	ldrh	r2, [r3, #2]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	b299      	uxth	r1, r3
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f7ff ff2f 	bl	80019fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d3c8      	bcc.n	8001b42 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d3ad      	bcc.n	8001b1e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <SSD1306_Putc+0xfc>)
 8001bd2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000738 	.word	0x20000738

08001be4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001bf2:	e012      	b.n	8001c1a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff71 	bl	8001ae4 <SSD1306_Putc>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d002      	beq.n	8001c14 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	e008      	b.n	8001c26 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e8      	bne.n	8001bf4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	781b      	ldrb	r3, [r3, #0]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <ssd1306_I2C_Init+0x24>)
 8001c38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c3a:	e002      	b.n	8001c42 <ssd1306_I2C_Init+0x12>
		p--;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	0003d090 	.word	0x0003d090

08001c58 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b0c7      	sub	sp, #284	; 0x11c
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4639      	mov	r1, r7
 8001c64:	600a      	str	r2, [r1, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	4602      	mov	r2, r0
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	460a      	mov	r2, r1
 8001c78:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	1dba      	adds	r2, r7, #6
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c8a:	e010      	b.n	8001cae <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001c8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c90:	463a      	mov	r2, r7
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	441a      	add	r2, r3
 8001c96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	7811      	ldrb	r1, [r2, #0]
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ca4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001cae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	1d3a      	adds	r2, r7, #4
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8e7      	bhi.n	8001c8c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f107 020c 	add.w	r2, r7, #12
 8001cce:	200a      	movs	r0, #10
 8001cd0:	9000      	str	r0, [sp, #0]
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001cd4:	f001 f908 	bl	8002ee8 <HAL_I2C_Master_Transmit>
}
 8001cd8:	bf00      	nop
 8001cda:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200014f4 	.word	0x200014f4

08001ce8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71bb      	strb	r3, [r7, #6]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001cfe:	797b      	ldrb	r3, [r7, #5]
 8001d00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	b299      	uxth	r1, r3
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <ssd1306_I2C_Write+0x38>)
 8001d12:	f001 f8e9 	bl	8002ee8 <HAL_I2C_Master_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200014f4 	.word	0x200014f4

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_MspInit+0x68>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_MspInit+0x68>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6193      	str	r3, [r2, #24]
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_MspInit+0x68>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_MspInit+0x68>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_MspInit+0x68>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_MspInit+0x68>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	f06f 0001 	mvn.w	r0, #1
 8001d62:	f000 fdc2 	bl	80028ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_MspInit+0x6c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_MspInit+0x6c>)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010000 	.word	0x40010000

08001d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_ADC_MspInit+0x6c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d121      	bne.n	8001df8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_ADC_MspInit+0x70>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de4:	2304      	movs	r3, #4
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de8:	2303      	movs	r3, #3
 8001dea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_ADC_MspInit+0x74>)
 8001df4:	f000 fdb0 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40012800 	.word	0x40012800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010800 	.word	0x40010800

08001e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <HAL_I2C_MspInit+0xc8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d124      	bne.n	8001e76 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e44:	23c0      	movs	r3, #192	; 0xc0
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4821      	ldr	r0, [pc, #132]	; (8001edc <HAL_I2C_MspInit+0xd0>)
 8001e58:	f000 fd7e 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e66:	61d3      	str	r3, [r2, #28]
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e74:	e029      	b.n	8001eca <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_I2C_MspInit+0xd4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d124      	bne.n	8001eca <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9e:	2312      	movs	r3, #18
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <HAL_I2C_MspInit+0xd0>)
 8001eae:	f000 fd53 	bl	8002958 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_I2C_MspInit+0xcc>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40005400 	.word	0x40005400
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40005800 	.word	0x40005800

08001ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <HAL_TIM_Base_MspInit+0x44>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d113      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_TIM_Base_MspInit+0x48>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_TIM_Base_MspInit+0x48>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_TIM_Base_MspInit+0x48>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	201d      	movs	r0, #29
 8001f14:	f000 fce9 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f000 fd02 	bl	8002922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40021000 	.word	0x40021000

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5e:	f000 f8bb 	bl	80020d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f62:	f003 ffc9 	bl	8005ef8 <xTaskGetSchedulerState>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f6c:	f004 f9b4 	bl	80062d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <TIM3_IRQHandler+0x10>)
 8001f7a:	f002 fe7d 	bl	8004c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200015ac 	.word	0x200015ac

08001f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <_sbrk+0x5c>)
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <_sbrk+0x60>)
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <_sbrk+0x64>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <_sbrk+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb8:	f004 fbaa 	bl	8006710 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc6:	e009      	b.n	8001fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <_sbrk+0x64>)
 8001fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20005000 	.word	0x20005000
 8001fe8:	00000400 	.word	0x00000400
 8001fec:	20000740 	.word	0x20000740
 8001ff0:	20001638 	.word	0x20001638

08001ff4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002000:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002002:	e003      	b.n	800200c <LoopCopyDataInit>

08002004 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002006:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002008:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800200a:	3104      	adds	r1, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800200c:	480a      	ldr	r0, [pc, #40]	; (8002038 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002010:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002012:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002014:	d3f6      	bcc.n	8002004 <CopyDataInit>
  ldr r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002018:	e002      	b.n	8002020 <LoopFillZerobss>

0800201a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800201c:	f842 3b04 	str.w	r3, [r2], #4

08002020 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002022:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002024:	d3f9      	bcc.n	800201a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002026:	f7ff ffe5 	bl	8001ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202a:	f004 fb77 	bl	800671c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202e:	f7ff f865 	bl	80010fc <main>
  bx lr
 8002032:	4770      	bx	lr
  ldr r3, =_sidata
 8002034:	0800802c 	.word	0x0800802c
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800203c:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8002040:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8002044:	20001634 	.word	0x20001634

08002048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC1_2_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_Init+0x28>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_Init+0x28>)
 8002056:	f043 0310 	orr.w	r3, r3, #16
 800205a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 fc39 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002062:	200f      	movs	r0, #15
 8002064:	f000 f808 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002068:	f7ff fe5c 	bl	8001d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fc51 	bl	800293e <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b4:	f000 fc19 	bl	80028ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000020 	.word	0x20000020
 80020d0:	20000028 	.word	0x20000028
 80020d4:	20000024 	.word	0x20000024

080020d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x1c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_IncTick+0x20>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_IncTick+0x20>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000028 	.word	0x20000028
 80020f8:	20001620 	.word	0x20001620

080020fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <HAL_GetTick+0x10>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20001620 	.word	0x20001620

08002110 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0be      	b.n	80022b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fe20 	bl	8001d94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fab7 	bl	80026c8 <ADC_ConversionStop_Disable>
 800215a:	4603      	mov	r3, r0
 800215c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 8099 	bne.w	800229e <HAL_ADC_Init+0x18e>
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 8095 	bne.w	800229e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800217c:	f023 0302 	bic.w	r3, r3, #2
 8002180:	f043 0202 	orr.w	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002190:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7b1b      	ldrb	r3, [r3, #12]
 8002196:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002198:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4313      	orrs	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a8:	d003      	beq.n	80021b2 <HAL_ADC_Init+0xa2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_ADC_Init+0xa8>
 80021b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b6:	e000      	b.n	80021ba <HAL_ADC_Init+0xaa>
 80021b8:	2300      	movs	r3, #0
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7d1b      	ldrb	r3, [r3, #20]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d119      	bne.n	80021fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7b1b      	ldrb	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	035a      	lsls	r2, r3, #13
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e00b      	b.n	80021fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_ADC_Init+0x1a8>)
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	430b      	orrs	r3, r1
 8002222:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222c:	d003      	beq.n	8002236 <HAL_ADC_Init+0x126>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d104      	bne.n	8002240 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	3b01      	subs	r3, #1
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	430a      	orrs	r2, r1
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_ADC_Init+0x1ac>)
 800225c:	4013      	ands	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d10b      	bne.n	800227c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800227a:	e018      	b.n	80022ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f023 0312 	bic.w	r3, r3, #18
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800229c:	e007      	b.n	80022ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	ffe1f7fd 	.word	0xffe1f7fd
 80022bc:	ff1f0efe 	.word	0xff1f0efe

080022c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Start+0x1a>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e098      	b.n	800240c <HAL_ADC_Start+0x14c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f99e 	bl	8002624 <ADC_Enable>
 80022e8:	4603      	mov	r3, r0
 80022ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 8087 	bne.w	8002402 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a41      	ldr	r2, [pc, #260]	; (8002414 <HAL_ADC_Start+0x154>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d105      	bne.n	800231e <HAL_ADC_Start+0x5e>
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_ADC_Start+0x158>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d115      	bne.n	800234a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d026      	beq.n	8002386 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002340:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002348:	e01d      	b.n	8002386 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_ADC_Start+0x158>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_ADC_Start+0xaa>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_ADC_Start+0x154>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10d      	bne.n	8002386 <HAL_ADC_Start+0xc6>
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_ADC_Start+0x158>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800237e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f023 0206 	bic.w	r2, r3, #6
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
 800239e:	e002      	b.n	80023a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f06f 0202 	mvn.w	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023c6:	d113      	bne.n	80023f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023cc:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_ADC_Start+0x154>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d105      	bne.n	80023de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_ADC_Start+0x158>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	e00c      	b.n	800240a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	e003      	b.n	800240a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40012800 	.word	0x40012800
 8002418:	40012400 	.word	0x40012400

0800241c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x20>
 8002450:	2302      	movs	r3, #2
 8002452:	e0dc      	b.n	800260e <HAL_ADC_ConfigChannel+0x1da>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d81c      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b05      	subs	r3, #5
 8002476:	221f      	movs	r2, #31
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	4019      	ands	r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b05      	subs	r3, #5
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	; 0x34
 800249c:	e03c      	b.n	8002518 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d81c      	bhi.n	80024e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	3b23      	subs	r3, #35	; 0x23
 80024b8:	221f      	movs	r2, #31
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	4019      	ands	r1, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b23      	subs	r3, #35	; 0x23
 80024d2:	fa00 f203 	lsl.w	r2, r0, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
 80024de:	e01b      	b.n	8002518 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b41      	subs	r3, #65	; 0x41
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b41      	subs	r3, #65	; 0x41
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d91c      	bls.n	800255a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	2207      	movs	r2, #7
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6898      	ldr	r0, [r3, #8]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	3b1e      	subs	r3, #30
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	e019      	b.n	800258e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6919      	ldr	r1, [r3, #16]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	2207      	movs	r2, #7
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	4019      	ands	r1, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6898      	ldr	r0, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b10      	cmp	r3, #16
 8002594:	d003      	beq.n	800259e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800259a:	2b11      	cmp	r3, #17
 800259c:	d132      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_ADC_ConfigChannel+0x1e4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d125      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d126      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025c4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d11a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_ADC_ConfigChannel+0x1e8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_ADC_ConfigChannel+0x1ec>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9a      	lsrs	r2, r3, #18
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025e4:	e002      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x1b2>
 80025f2:	e007      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	40012400 	.word	0x40012400
 800261c:	20000020 	.word	0x20000020
 8002620:	431bde83 	.word	0x431bde83

08002624 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d039      	beq.n	80026b6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <ADC_Enable+0x9c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <ADC_Enable+0xa0>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002660:	e002      	b.n	8002668 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800266e:	f7ff fd45 	bl	80020fc <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002674:	e018      	b.n	80026a8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002676:	f7ff fd41 	bl	80020fc <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d911      	bls.n	80026a8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d1df      	bne.n	8002676 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000020 	.word	0x20000020
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d127      	bne.n	8002732 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026f2:	f7ff fd03 	bl	80020fc <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f8:	e014      	b.n	8002724 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026fa:	f7ff fcff 	bl	80020fc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d90d      	bls.n	8002724 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f043 0210 	orr.w	r2, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e007      	b.n	8002734 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d0e3      	beq.n	80026fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db0b      	blt.n	80027ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4906      	ldr	r1, [pc, #24]	; (80027d4 <__NVIC_EnableIRQ+0x34>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2001      	movs	r0, #1
 80027c2:	fa00 f202 	lsl.w	r2, r0, r2
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b4:	f7ff ff90 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff2d 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028fc:	f7ff ff42 	bl	8002784 <__NVIC_GetPriorityGrouping>
 8002900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff ff90 	bl	800282c <NVIC_EncodePriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff5f 	bl	80027d8 <__NVIC_SetPriority>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff35 	bl	80027a0 <__NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffa2 	bl	8002890 <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b08b      	sub	sp, #44	; 0x2c
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296a:	e169      	b.n	8002c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800296c:	2201      	movs	r2, #1
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	429a      	cmp	r2, r3
 8002986:	f040 8158 	bne.w	8002c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a9a      	ldr	r2, [pc, #616]	; (8002bf8 <HAL_GPIO_Init+0x2a0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d05e      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 8002994:	4a98      	ldr	r2, [pc, #608]	; (8002bf8 <HAL_GPIO_Init+0x2a0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d875      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 800299a:	4a98      	ldr	r2, [pc, #608]	; (8002bfc <HAL_GPIO_Init+0x2a4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d058      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029a0:	4a96      	ldr	r2, [pc, #600]	; (8002bfc <HAL_GPIO_Init+0x2a4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d86f      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029a6:	4a96      	ldr	r2, [pc, #600]	; (8002c00 <HAL_GPIO_Init+0x2a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d052      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029ac:	4a94      	ldr	r2, [pc, #592]	; (8002c00 <HAL_GPIO_Init+0x2a8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d869      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029b2:	4a94      	ldr	r2, [pc, #592]	; (8002c04 <HAL_GPIO_Init+0x2ac>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04c      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029b8:	4a92      	ldr	r2, [pc, #584]	; (8002c04 <HAL_GPIO_Init+0x2ac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d863      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029be:	4a92      	ldr	r2, [pc, #584]	; (8002c08 <HAL_GPIO_Init+0x2b0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d046      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
 80029c4:	4a90      	ldr	r2, [pc, #576]	; (8002c08 <HAL_GPIO_Init+0x2b0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d85d      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029ca:	2b12      	cmp	r3, #18
 80029cc:	d82a      	bhi.n	8002a24 <HAL_GPIO_Init+0xcc>
 80029ce:	2b12      	cmp	r3, #18
 80029d0:	d859      	bhi.n	8002a86 <HAL_GPIO_Init+0x12e>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <HAL_GPIO_Init+0x80>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	08002a53 	.word	0x08002a53
 80029dc:	08002a2d 	.word	0x08002a2d
 80029e0:	08002a3f 	.word	0x08002a3f
 80029e4:	08002a81 	.word	0x08002a81
 80029e8:	08002a87 	.word	0x08002a87
 80029ec:	08002a87 	.word	0x08002a87
 80029f0:	08002a87 	.word	0x08002a87
 80029f4:	08002a87 	.word	0x08002a87
 80029f8:	08002a87 	.word	0x08002a87
 80029fc:	08002a87 	.word	0x08002a87
 8002a00:	08002a87 	.word	0x08002a87
 8002a04:	08002a87 	.word	0x08002a87
 8002a08:	08002a87 	.word	0x08002a87
 8002a0c:	08002a87 	.word	0x08002a87
 8002a10:	08002a87 	.word	0x08002a87
 8002a14:	08002a87 	.word	0x08002a87
 8002a18:	08002a87 	.word	0x08002a87
 8002a1c:	08002a35 	.word	0x08002a35
 8002a20:	08002a49 	.word	0x08002a49
 8002a24:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_GPIO_Init+0x2b4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a2a:	e02c      	b.n	8002a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	623b      	str	r3, [r7, #32]
          break;
 8002a32:	e029      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e024      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	3308      	adds	r3, #8
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e01f      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	623b      	str	r3, [r7, #32]
          break;
 8002a50:	e01a      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e013      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a68:	2308      	movs	r3, #8
 8002a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	611a      	str	r2, [r3, #16]
          break;
 8002a72:	e009      	b.n	8002a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a74:	2308      	movs	r3, #8
 8002a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	615a      	str	r2, [r3, #20]
          break;
 8002a7e:	e003      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x130>
          break;
 8002a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d801      	bhi.n	8002a92 <HAL_GPIO_Init+0x13a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	e001      	b.n	8002a96 <HAL_GPIO_Init+0x13e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2bff      	cmp	r3, #255	; 0xff
 8002a9c:	d802      	bhi.n	8002aa4 <HAL_GPIO_Init+0x14c>
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_Init+0x152>
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3b08      	subs	r3, #8
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	210f      	movs	r1, #15
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	6a39      	ldr	r1, [r7, #32]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80b1 	beq.w	8002c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <HAL_GPIO_Init+0x2b8>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a4c      	ldr	r2, [pc, #304]	; (8002c10 <HAL_GPIO_Init+0x2b8>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_GPIO_Init+0x2b8>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_GPIO_Init+0x2bc>)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	3302      	adds	r3, #2
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_GPIO_Init+0x1ec>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3f      	ldr	r2, [pc, #252]	; (8002c1c <HAL_GPIO_Init+0x2c4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00d      	beq.n	8002b40 <HAL_GPIO_Init+0x1e8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3e      	ldr	r2, [pc, #248]	; (8002c20 <HAL_GPIO_Init+0x2c8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0x1e4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <HAL_GPIO_Init+0x2cc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_GPIO_Init+0x1e0>
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	e004      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e002      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_GPIO_Init+0x1ee>
 8002b44:	2300      	movs	r3, #0
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	f002 0203 	and.w	r2, r2, #3
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	4093      	lsls	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b56:	492f      	ldr	r1, [pc, #188]	; (8002c14 <HAL_GPIO_Init+0x2bc>)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b70:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	492c      	ldr	r1, [pc, #176]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e006      	b.n	8002b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4928      	ldr	r1, [pc, #160]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4922      	ldr	r1, [pc, #136]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	491e      	ldr	r1, [pc, #120]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4918      	ldr	r1, [pc, #96]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4914      	ldr	r1, [pc, #80]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d021      	beq.n	8002c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	490e      	ldr	r1, [pc, #56]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
 8002bf4:	e021      	b.n	8002c3a <HAL_GPIO_Init+0x2e2>
 8002bf6:	bf00      	nop
 8002bf8:	10320000 	.word	0x10320000
 8002bfc:	10310000 	.word	0x10310000
 8002c00:	10220000 	.word	0x10220000
 8002c04:	10210000 	.word	0x10210000
 8002c08:	10120000 	.word	0x10120000
 8002c0c:	10110000 	.word	0x10110000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	40010c00 	.word	0x40010c00
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4909      	ldr	r1, [pc, #36]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f47f ae8e 	bne.w	800296c <HAL_GPIO_Init+0x14>
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	372c      	adds	r7, #44	; 0x2c
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40010400 	.word	0x40010400

08002c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e12b      	b.n	8002eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff f8c0 	bl	8001e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f001 fe4e 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a81      	ldr	r2, [pc, #516]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d807      	bhi.n	8002ce4 <HAL_I2C_Init+0x84>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a80      	ldr	r2, [pc, #512]	; (8002ed8 <HAL_I2C_Init+0x278>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e006      	b.n	8002cf2 <HAL_I2C_Init+0x92>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a7d      	ldr	r2, [pc, #500]	; (8002edc <HAL_I2C_Init+0x27c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf94      	ite	ls
 8002cec:	2301      	movls	r3, #1
 8002cee:	2300      	movhi	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0e7      	b.n	8002eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a78      	ldr	r2, [pc, #480]	; (8002ee0 <HAL_I2C_Init+0x280>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0c9b      	lsrs	r3, r3, #18
 8002d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d802      	bhi.n	8002d34 <HAL_I2C_Init+0xd4>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3301      	adds	r3, #1
 8002d32:	e009      	b.n	8002d48 <HAL_I2C_Init+0xe8>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_I2C_Init+0x284>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	3301      	adds	r3, #1
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	495c      	ldr	r1, [pc, #368]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002d64:	428b      	cmp	r3, r1
 8002d66:	d819      	bhi.n	8002d9c <HAL_I2C_Init+0x13c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e59      	subs	r1, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_I2C_Init+0x138>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e59      	subs	r1, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d96:	e051      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	e04f      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <HAL_I2C_Init+0x168>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e012      	b.n	8002dee <HAL_I2C_Init+0x18e>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Init+0x196>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e022      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10e      	bne.n	8002e1c <HAL_I2C_Init+0x1bc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e58      	subs	r0, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	440b      	add	r3, r1
 8002e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	e00f      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	0099      	lsls	r1, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6809      	ldr	r1, [r1, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6911      	ldr	r1, [r2, #16]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68d2      	ldr	r2, [r2, #12]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	000186a0 	.word	0x000186a0
 8002ed8:	001e847f 	.word	0x001e847f
 8002edc:	003d08ff 	.word	0x003d08ff
 8002ee0:	431bde83 	.word	0x431bde83
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	817b      	strh	r3, [r7, #10]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff f8fe 	bl	80020fc <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	f040 80e0 	bne.w	80030d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2319      	movs	r3, #25
 8002f16:	2201      	movs	r2, #1
 8002f18:	4970      	ldr	r1, [pc, #448]	; (80030dc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 ff72 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0d3      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_I2C_Master_Transmit+0x50>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0cc      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d007      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	; 0x21
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	893a      	ldrh	r2, [r7, #8]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fd2c 	bl	8003a04 <I2C_MasterRequestWrite>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e08d      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fcc:	e066      	b.n	800309c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 ffec 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d107      	bne.n	8002ff6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11b      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x188>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	6a39      	ldr	r1, [r7, #32]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 ffdc 	bl	8004032 <I2C_WaitOnBTFFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2b04      	cmp	r3, #4
 8003086:	d107      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e01a      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d194      	bne.n	8002fce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000

080030e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030fe:	f7fe fffd 	bl	80020fc <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 80d9 	bne.w	80032c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2319      	movs	r3, #25
 8003118:	2201      	movs	r2, #1
 800311a:	496d      	ldr	r1, [pc, #436]	; (80032d0 <HAL_I2C_Mem_Write+0x1ec>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fe71 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	e0cc      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_I2C_Mem_Write+0x56>
 8003136:	2302      	movs	r3, #2
 8003138:	e0c5      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d007      	beq.n	8003160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2221      	movs	r2, #33	; 0x21
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <HAL_I2C_Mem_Write+0x1f0>)
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a2:	88f8      	ldrh	r0, [r7, #6]
 80031a4:	893a      	ldrh	r2, [r7, #8]
 80031a6:	8979      	ldrh	r1, [r7, #10]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4603      	mov	r3, r0
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fca8 	bl	8003b08 <I2C_RequestMemoryWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d052      	beq.n	8003264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e081      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fef2 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d107      	bne.n	80031ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06b      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d11b      	bne.n	8003264 <HAL_I2C_Mem_Write+0x180>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1aa      	bne.n	80031c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fede 	bl	8004032 <I2C_WaitOnBTFFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e016      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	00100002 	.word	0x00100002
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f6:	f7fe ff01 	bl	80020fc <HAL_GetTick>
 80032fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b20      	cmp	r3, #32
 8003306:	f040 8244 	bne.w	8003792 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2319      	movs	r3, #25
 8003310:	2201      	movs	r2, #1
 8003312:	4982      	ldr	r1, [pc, #520]	; (800351c <HAL_I2C_Mem_Read+0x244>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fd75 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
 8003322:	e237      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_I2C_Mem_Read+0x5a>
 800332e:	2302      	movs	r3, #2
 8003330:	e230      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d007      	beq.n	8003358 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003366:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2222      	movs	r2, #34	; 0x22
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2240      	movs	r2, #64	; 0x40
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a62      	ldr	r2, [pc, #392]	; (8003520 <HAL_I2C_Mem_Read+0x248>)
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800339a:	88f8      	ldrh	r0, [r7, #6]
 800339c:	893a      	ldrh	r2, [r7, #8]
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	4603      	mov	r3, r0
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fc42 	bl	8003c34 <I2C_RequestMemoryRead>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1ec      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d113      	bne.n	80033ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e1c0      	b.n	800376c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d11e      	bne.n	8003430 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003400:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003402:	b672      	cpsid	i
}
 8003404:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800342c:	b662      	cpsie	i
}
 800342e:	e035      	b.n	800349c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11e      	bne.n	8003476 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003448:	b672      	cpsid	i
}
 800344a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003472:	b662      	cpsie	i
}
 8003474:	e012      	b.n	800349c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800349c:	e166      	b.n	800376c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	f200 811f 	bhi.w	80036e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d123      	bne.n	80034f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fdfd 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e167      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f6:	e139      	b.n	800376c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d152      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	2200      	movs	r2, #0
 8003508:	4906      	ldr	r1, [pc, #24]	; (8003524 <HAL_I2C_Mem_Read+0x24c>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fc7a 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e13c      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
 800351a:	bf00      	nop
 800351c:	00100002 	.word	0x00100002
 8003520:	ffff0000 	.word	0xffff0000
 8003524:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003528:	b672      	cpsid	i
}
 800352a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800356e:	b662      	cpsie	i
}
 8003570:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a4:	e0e2      	b.n	800376c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2200      	movs	r2, #0
 80035ae:	497b      	ldr	r1, [pc, #492]	; (800379c <HAL_I2C_Mem_Read+0x4c4>)
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fc27 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0e9      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035d0:	b672      	cpsid	i
}
 80035d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003606:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_I2C_Mem_Read+0x4c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	08db      	lsrs	r3, r3, #3
 800360c:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_I2C_Mem_Read+0x4cc>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0a1a      	lsrs	r2, r3, #8
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00da      	lsls	r2, r3, #3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	3b01      	subs	r3, #1
 8003624:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d118      	bne.n	800365e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800364e:	b662      	cpsie	i
}
 8003650:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e09a      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d1d9      	bne.n	8003620 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ae:	b662      	cpsie	i
}
 80036b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e4:	e042      	b.n	800376c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fce2 	bl	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e04c      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d118      	bne.n	800376c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f ae94 	bne.w	800349e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	00010004 	.word	0x00010004
 80037a0:	20000020 	.word	0x20000020
 80037a4:	14f8b589 	.word	0x14f8b589

080037a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	460b      	mov	r3, r1
 80037b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7fe fca0 	bl	80020fc <HAL_GetTick>
 80037bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	f040 8111 	bne.w	80039f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2319      	movs	r3, #25
 80037d6:	2201      	movs	r2, #1
 80037d8:	4988      	ldr	r1, [pc, #544]	; (80039fc <HAL_I2C_IsDeviceReady+0x254>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fb12 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	e104      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_I2C_IsDeviceReady+0x50>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e0fd      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d007      	beq.n	800381e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2224      	movs	r2, #36	; 0x24
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a70      	ldr	r2, [pc, #448]	; (8003a00 <HAL_I2C_IsDeviceReady+0x258>)
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003850:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fad0 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003878:	d103      	bne.n	8003882 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0b6      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003894:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003896:	f7fe fc31 	bl	80020fc <HAL_GetTick>
 800389a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ca:	e025      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fe fc16 	bl	80020fc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <HAL_I2C_IsDeviceReady+0x13a>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	22a0      	movs	r2, #160	; 0xa0
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2ba0      	cmp	r3, #160	; 0xa0
 8003922:	d005      	beq.n	8003930 <HAL_I2C_IsDeviceReady+0x188>
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_I2C_IsDeviceReady+0x188>
 800392a:	7dbb      	ldrb	r3, [r7, #22]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0cd      	beq.n	80038cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d129      	bne.n	800399a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2319      	movs	r3, #25
 8003972:	2201      	movs	r2, #1
 8003974:	4921      	ldr	r1, [pc, #132]	; (80039fc <HAL_I2C_IsDeviceReady+0x254>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fa44 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e036      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e02c      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2319      	movs	r3, #25
 80039ba:	2201      	movs	r2, #1
 80039bc:	490f      	ldr	r1, [pc, #60]	; (80039fc <HAL_I2C_IsDeviceReady+0x254>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fa20 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e012      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f4ff af32 	bcc.w	8003842 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	00100002 	.word	0x00100002
 8003a00:	ffff0000 	.word	0xffff0000

08003a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d006      	beq.n	8003a2e <I2C_MasterRequestWrite+0x2a>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d003      	beq.n	8003a2e <I2C_MasterRequestWrite+0x2a>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a2c:	d108      	bne.n	8003a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e00b      	b.n	8003a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b12      	cmp	r3, #18
 8003a46:	d107      	bne.n	8003a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9cd 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7e:	d103      	bne.n	8003a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e035      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a94:	d108      	bne.n	8003aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e01b      	b.n	8003ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aa8:	897b      	ldrh	r3, [r7, #10]
 8003aaa:	11db      	asrs	r3, r3, #7
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 0306 	and.w	r3, r3, #6
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f063 030f 	orn	r3, r3, #15
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	490e      	ldr	r1, [pc, #56]	; (8003b00 <I2C_MasterRequestWrite+0xfc>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f9f3 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e010      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4907      	ldr	r1, [pc, #28]	; (8003b04 <I2C_MasterRequestWrite+0x100>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f9e3 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	00010008 	.word	0x00010008
 8003b04:	00010002 	.word	0x00010002

08003b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f960 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d103      	bne.n	8003b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e05f      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	492d      	ldr	r1, [pc, #180]	; (8003c30 <I2C_RequestMemoryWrite+0x128>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f998 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04c      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa02 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02b      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e021      	b.n	8003c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f9dc 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e005      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00010002 	.word	0x00010002

08003c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	460b      	mov	r3, r1
 8003c48:	813b      	strh	r3, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8c2 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c94:	d103      	bne.n	8003c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0aa      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	4952      	ldr	r1, [pc, #328]	; (8003e00 <I2C_RequestMemoryRead+0x1cc>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f8fa 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e097      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f964 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e076      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d10:	893b      	ldrh	r3, [r7, #8]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	e021      	b.n	8003d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f93e 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e050      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	893b      	ldrh	r3, [r7, #8]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	6a39      	ldr	r1, [r7, #32]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f923 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e035      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f82b 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d103      	bne.n	8003dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e013      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd0:	897b      	ldrh	r3, [r7, #10]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <I2C_RequestMemoryRead+0x1cc>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f863 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e025      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1c:	d021      	beq.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fe f96d 	bl	80020fc <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d116      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e023      	b.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10d      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	e00c      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0b6      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec0:	e051      	b.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	d123      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e046      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f20:	d021      	beq.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe f8eb 	bl	80020fc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e020      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10c      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e00b      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d18d      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fbc:	e02d      	b.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f8ce 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02d      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd4:	d021      	beq.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fe f891 	bl	80020fc <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e007      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d1ca      	bne.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800403e:	e02d      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f88d 	bl	8004160 <I2C_IsAcknowledgeFailed>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02d      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004056:	d021      	beq.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fe f850 	bl	80020fc <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d1ca      	bne.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c0:	e042      	b.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d119      	bne.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0210 	mvn.w	r2, #16
 80040d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e029      	b.n	8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004104:	f7fd fffa 	bl	80020fc <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d116      	bne.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e007      	b.n	8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d1b5      	bne.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d11b      	bne.n	80041b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e26c      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8087 	beq.w	80042ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041dc:	4b92      	ldr	r3, [pc, #584]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d00c      	beq.n	8004202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041e8:	4b8f      	ldr	r3, [pc, #572]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d112      	bne.n	800421a <HAL_RCC_OscConfig+0x5e>
 80041f4:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d10b      	bne.n	800421a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004202:	4b89      	ldr	r3, [pc, #548]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d06c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x12c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d168      	bne.n	80042e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e246      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x76>
 8004224:	4b80      	ldr	r3, [pc, #512]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7f      	ldr	r2, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800422a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e02e      	b.n	8004290 <HAL_RCC_OscConfig+0xd4>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x98>
 800423a:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7a      	ldr	r2, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a77      	ldr	r2, [pc, #476]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800424c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e01d      	b.n	8004290 <HAL_RCC_OscConfig+0xd4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0xbc>
 800425e:	4b72      	ldr	r3, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a71      	ldr	r2, [pc, #452]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b6f      	ldr	r3, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6e      	ldr	r2, [pc, #440]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0xd4>
 8004278:	4b6b      	ldr	r3, [pc, #428]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6a      	ldr	r2, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a67      	ldr	r2, [pc, #412]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd ff30 	bl	80020fc <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd ff2c 	bl	80020fc <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1fa      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b5d      	ldr	r3, [pc, #372]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe4>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fd ff1c 	bl	80020fc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fd ff18 	bl	80020fc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1e6      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042da:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x10c>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d063      	beq.n	80043be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042f6:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x18c>
 800430e:	4b46      	ldr	r3, [pc, #280]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	4b43      	ldr	r3, [pc, #268]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_RCC_OscConfig+0x176>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1ba      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4939      	ldr	r1, [pc, #228]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	e03a      	b.n	80043be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004350:	4b36      	ldr	r3, [pc, #216]	; (800442c <HAL_RCC_OscConfig+0x270>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fd fed1 	bl	80020fc <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7fd fecd 	bl	80020fc <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e19b      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004370:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4927      	ldr	r1, [pc, #156]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <HAL_RCC_OscConfig+0x270>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd feb0 	bl	80020fc <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fd feac 	bl	80020fc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e17a      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d03a      	beq.n	8004440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d019      	beq.n	8004406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <HAL_RCC_OscConfig+0x274>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fd fe90 	bl	80020fc <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fd fe8c 	bl	80020fc <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e15a      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043fe:	2001      	movs	r0, #1
 8004400:	f000 fac4 	bl	800498c <RCC_Delay>
 8004404:	e01c      	b.n	8004440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_OscConfig+0x274>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440c:	f7fd fe76 	bl	80020fc <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004414:	f7fd fe72 	bl	80020fc <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d908      	bls.n	8004434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e140      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	42420000 	.word	0x42420000
 8004430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	4b9e      	ldr	r3, [pc, #632]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e9      	bne.n	8004414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80a6 	beq.w	800459a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b97      	ldr	r3, [pc, #604]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	4b94      	ldr	r3, [pc, #592]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4a93      	ldr	r2, [pc, #588]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	61d3      	str	r3, [r2, #28]
 800446a:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b8e      	ldr	r3, [pc, #568]	; (80046b4 <HAL_RCC_OscConfig+0x4f8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d118      	bne.n	80044b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a8a      	ldr	r2, [pc, #552]	; (80046b4 <HAL_RCC_OscConfig+0x4f8>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7fd fe33 	bl	80020fc <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449a:	f7fd fe2f 	bl	80020fc <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0fd      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b81      	ldr	r3, [pc, #516]	; (80046b4 <HAL_RCC_OscConfig+0x4f8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x312>
 80044c0:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a7a      	ldr	r2, [pc, #488]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	e02d      	b.n	800452a <HAL_RCC_OscConfig+0x36e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x334>
 80044d6:	4b76      	ldr	r3, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4a75      	ldr	r2, [pc, #468]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	6213      	str	r3, [r2, #32]
 80044e2:	4b73      	ldr	r3, [pc, #460]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	4a72      	ldr	r2, [pc, #456]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	6213      	str	r3, [r2, #32]
 80044ee:	e01c      	b.n	800452a <HAL_RCC_OscConfig+0x36e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	d10c      	bne.n	8004512 <HAL_RCC_OscConfig+0x356>
 80044f8:	4b6d      	ldr	r3, [pc, #436]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4a6c      	ldr	r2, [pc, #432]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	6213      	str	r3, [r2, #32]
 8004504:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6213      	str	r3, [r2, #32]
 8004510:	e00b      	b.n	800452a <HAL_RCC_OscConfig+0x36e>
 8004512:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4a66      	ldr	r2, [pc, #408]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6213      	str	r3, [r2, #32]
 800451e:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4a63      	ldr	r2, [pc, #396]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d015      	beq.n	800455e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004532:	f7fd fde3 	bl	80020fc <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fd fddf 	bl	80020fc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0ab      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ee      	beq.n	800453a <HAL_RCC_OscConfig+0x37e>
 800455c:	e014      	b.n	8004588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fd fdcd 	bl	80020fc <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fd fdc9 	bl	80020fc <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	; 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e095      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457c:	4b4c      	ldr	r3, [pc, #304]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ee      	bne.n	8004566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d105      	bne.n	800459a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4a47      	ldr	r2, [pc, #284]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8081 	beq.w	80046a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d061      	beq.n	8004674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d146      	bne.n	8004646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b8:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCC_OscConfig+0x4fc>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fd fd9d 	bl	80020fc <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fd fd99 	bl	80020fc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e067      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d8:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d108      	bne.n	8004600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ee:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	492d      	ldr	r1, [pc, #180]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a19      	ldr	r1, [r3, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	430b      	orrs	r3, r1
 8004612:	4927      	ldr	r1, [pc, #156]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCC_OscConfig+0x4fc>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fd fd6d 	bl	80020fc <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004626:	f7fd fd69 	bl	80020fc <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e037      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x46a>
 8004644:	e02f      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_RCC_OscConfig+0x4fc>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fd fd56 	bl	80020fc <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fd52 	bl	80020fc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e020      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x498>
 8004672:	e018      	b.n	80046a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e013      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_OscConfig+0x4f4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	429a      	cmp	r2, r3
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40007000 	.word	0x40007000
 80046b8:	42420060 	.word	0x42420060

080046bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0d0      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d910      	bls.n	8004700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	4965      	ldr	r1, [pc, #404]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b63      	ldr	r3, [pc, #396]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0b8      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a58      	ldr	r2, [pc, #352]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004730:	4b53      	ldr	r3, [pc, #332]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a52      	ldr	r2, [pc, #328]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800473a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	494d      	ldr	r1, [pc, #308]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d040      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d115      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07f      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e073      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06b      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4936      	ldr	r1, [pc, #216]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fd fca6 	bl	80020fc <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fd fca2 	bl	80020fc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e053      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d210      	bcs.n	800480c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	4922      	ldr	r1, [pc, #136]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e032      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4916      	ldr	r1, [pc, #88]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800484a:	f000 f821 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	490a      	ldr	r1, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	5ccb      	ldrb	r3, [r1, r3]
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1cc>)
 8004864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fd fc04 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40022000 	.word	0x40022000
 8004880:	40021000 	.word	0x40021000
 8004884:	08007fd8 	.word	0x08007fd8
 8004888:	20000020 	.word	0x20000020
 800488c:	20000024 	.word	0x20000024

08004890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	b490      	push	{r4, r7}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004896:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004898:	1d3c      	adds	r4, r7, #4
 800489a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800489c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048a0:	f240 2301 	movw	r3, #513	; 0x201
 80048a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048ba:	4b22      	ldr	r3, [pc, #136]	; (8004944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x40>
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x46>
 80048ce:	e02d      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d2:	623b      	str	r3, [r7, #32]
      break;
 80048d4:	e02d      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	0c9b      	lsrs	r3, r3, #18
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048e2:	4413      	add	r3, r2
 80048e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	0c5b      	lsrs	r3, r3, #17
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004902:	4413      	add	r3, r2
 8004904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800490e:	fb02 f203 	mul.w	r2, r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	e004      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	4a0b      	ldr	r2, [pc, #44]	; (800494c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	623b      	str	r3, [r7, #32]
      break;
 800492a:	e002      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492e:	623b      	str	r3, [r7, #32]
      break;
 8004930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004932:	6a3b      	ldr	r3, [r7, #32]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3728      	adds	r7, #40	; 0x28
 8004938:	46bd      	mov	sp, r7
 800493a:	bc90      	pop	{r4, r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	08007264 	.word	0x08007264
 8004944:	40021000 	.word	0x40021000
 8004948:	007a1200 	.word	0x007a1200
 800494c:	003d0900 	.word	0x003d0900

08004950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004954:	4b02      	ldr	r3, [pc, #8]	; (8004960 <HAL_RCC_GetHCLKFreq+0x10>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	20000020 	.word	0x20000020

08004964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004968:	f7ff fff2 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	08007fe8 	.word	0x08007fe8

0800498c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <RCC_Delay+0x34>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <RCC_Delay+0x38>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0a5b      	lsrs	r3, r3, #9
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049a8:	bf00      	nop
  }
  while (Delay --);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	60fa      	str	r2, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f9      	bne.n	80049a8 <RCC_Delay+0x1c>
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000020 	.word	0x20000020
 80049c4:	10624dd3 	.word	0x10624dd3

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d07d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e8:	4b4f      	ldr	r3, [pc, #316]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f4:	4b4c      	ldr	r3, [pc, #304]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4a4b      	ldr	r2, [pc, #300]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	61d3      	str	r3, [r2, #28]
 8004a00:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d118      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a28:	f7fd fb68 	bl	80020fc <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fd fb64 	bl	80020fc <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e06d      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a42:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4e:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02e      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d027      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d014      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fd fb33 	bl	80020fc <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fd fb2f 	bl	80020fc <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e036      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ee      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4917      	ldr	r1, [pc, #92]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	490b      	ldr	r1, [pc, #44]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4904      	ldr	r1, [pc, #16]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42420440 	.word	0x42420440

08004b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e041      	b.n	8004bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd f9c2 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fa70 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d001      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e03a      	b.n	8004c62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_TIM_Base_Start_IT+0x98>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x58>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c16:	d009      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x58>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x58>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d111      	bne.n	8004c50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d010      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	e007      	b.n	8004c60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800

08004c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d122      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d11b      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0202 	mvn.w	r2, #2
 8004ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9b1 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9a4 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f9b3 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0204 	mvn.w	r2, #4
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f987 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f97a 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f989 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0208 	mvn.w	r2, #8
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2204      	movs	r2, #4
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f95d 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f950 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f95f 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0210 	mvn.w	r2, #16
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2208      	movs	r2, #8
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f933 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f926 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f935 	bl	8005034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10e      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d107      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0201 	mvn.w	r2, #1
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc fba6 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b80      	cmp	r3, #128	; 0x80
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa77 	bl	8005316 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8f9 	bl	8005046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d10e      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d107      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0220 	mvn.w	r2, #32
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa42 	bl	8005304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_ConfigClockSource+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0b3      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x180>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d03e      	beq.n	8004f58 <HAL_TIM_ConfigClockSource+0xd0>
 8004eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ede:	f200 8087 	bhi.w	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	f000 8085 	beq.w	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d87f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d01a      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0xa2>
 8004ef4:	2b70      	cmp	r3, #112	; 0x70
 8004ef6:	d87b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d050      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x116>
 8004efc:	2b60      	cmp	r3, #96	; 0x60
 8004efe:	d877      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d03c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0xf6>
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d873      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d058      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x136>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d86f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d064      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d86b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d060      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d867      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05c      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d05a      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f28:	e062      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6899      	ldr	r1, [r3, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f000 f966 	bl	800520a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	609a      	str	r2, [r3, #8]
      break;
 8004f56:	e04e      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f000 f94f 	bl	800520a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f7a:	609a      	str	r2, [r3, #8]
      break;
 8004f7c:	e03b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f000 f8c6 	bl	800511c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2150      	movs	r1, #80	; 0x50
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 f91d 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e02b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 f8e4 	bl	8005178 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2160      	movs	r1, #96	; 0x60
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f90d 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e01b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 f8a6 	bl	800511c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f8fd 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e00b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f000 f8f4 	bl	80051d6 <TIM_ITRx_SetConfig>
        break;
 8004fee:	e002      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ff4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <TIM_Base_SetConfig+0xb8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d108      	bne.n	800509a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <TIM_Base_SetConfig+0xb8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a07      	ldr	r2, [pc, #28]	; (8005110 <TIM_Base_SetConfig+0xb8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800

0800511c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f023 0201 	bic.w	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 030a 	bic.w	r3, r3, #10
 8005158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f023 0210 	bic.w	r2, r3, #16
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	031b      	lsls	r3, r3, #12
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f043 0307 	orr.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	021a      	lsls	r2, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	431a      	orrs	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4313      	orrs	r3, r2
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	609a      	str	r2, [r3, #8]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e046      	b.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d009      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a10      	ldr	r2, [pc, #64]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10c      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800

08005304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800533a:	2b84      	cmp	r3, #132	; 0x84
 800533c:	d005      	beq.n	800534a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800533e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	3303      	adds	r3, #3
 8005348:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800535a:	f000 fad1 	bl	8005900 <vTaskStartScheduler>
  
  return osOK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}

08005364 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	b089      	sub	sp, #36	; 0x24
 8005368:	af04      	add	r7, sp, #16
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d020      	beq.n	80053b8 <osThreadCreate+0x54>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01c      	beq.n	80053b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685c      	ldr	r4, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681d      	ldr	r5, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691e      	ldr	r6, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff ffc9 	bl	8005328 <makeFreeRtosPriority>
 8005396:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053a0:	9202      	str	r2, [sp, #8]
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	9100      	str	r1, [sp, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4632      	mov	r2, r6
 80053aa:	4629      	mov	r1, r5
 80053ac:	4620      	mov	r0, r4
 80053ae:	f000 f8e8 	bl	8005582 <xTaskCreateStatic>
 80053b2:	4603      	mov	r3, r0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e01c      	b.n	80053f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685c      	ldr	r4, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053c4:	b29e      	uxth	r6, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ffab 	bl	8005328 <makeFreeRtosPriority>
 80053d2:	4602      	mov	r2, r0
 80053d4:	f107 030c 	add.w	r3, r7, #12
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	9200      	str	r2, [sp, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4632      	mov	r2, r6
 80053e0:	4629      	mov	r1, r5
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f929 	bl	800563a <xTaskCreate>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d001      	beq.n	80053f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <osDelay+0x16>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	e000      	b.n	8005414 <osDelay+0x18>
 8005412:	2301      	movs	r3, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fa3f 	bl	8005898 <vTaskDelay>
  
  return osOK;
 800541a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800543c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f103 0208 	add.w	r2, r3, #8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f103 0208 	add.w	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d6:	d103      	bne.n	80054e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e00c      	b.n	80054fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3308      	adds	r3, #8
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e002      	b.n	80054ee <vListInsert+0x2e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d2f6      	bcs.n	80054e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6892      	ldr	r2, [r2, #8]
 8005546:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6852      	ldr	r2, [r2, #4]
 8005550:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d103      	bne.n	8005564 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005582:	b580      	push	{r7, lr}
 8005584:	b08e      	sub	sp, #56	; 0x38
 8005586:	af04      	add	r7, sp, #16
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	61fb      	str	r3, [r7, #28]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055c8:	2354      	movs	r3, #84	; 0x54
 80055ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b54      	cmp	r3, #84	; 0x54
 80055d0:	d00a      	beq.n	80055e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61bb      	str	r3, [r7, #24]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01e      	beq.n	800562c <xTaskCreateStatic+0xaa>
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	2202      	movs	r2, #2
 8005602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005606:	2300      	movs	r3, #0
 8005608:	9303      	str	r3, [sp, #12]
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	9302      	str	r3, [sp, #8]
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f850 	bl	80056c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005626:	f000 f8cd 	bl	80057c4 <prvAddNewTaskToReadyList>
 800562a:	e001      	b.n	8005630 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005630:	697b      	ldr	r3, [r7, #20]
	}
 8005632:	4618      	mov	r0, r3
 8005634:	3728      	adds	r7, #40	; 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08c      	sub	sp, #48	; 0x30
 800563e:	af04      	add	r7, sp, #16
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fe86 	bl	8006360 <pvPortMalloc>
 8005654:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800565c:	2054      	movs	r0, #84	; 0x54
 800565e:	f000 fe7f 	bl	8006360 <pvPortMalloc>
 8005662:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
 8005670:	e005      	b.n	800567e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005672:	6978      	ldr	r0, [r7, #20]
 8005674:	f000 ff38 	bl	80064e8 <vPortFree>
 8005678:	e001      	b.n	800567e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d017      	beq.n	80056b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	2300      	movs	r3, #0
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	9302      	str	r3, [sp, #8]
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f80e 	bl	80056c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056a8:	69f8      	ldr	r0, [r7, #28]
 80056aa:	f000 f88b 	bl	80057c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056ae:	2301      	movs	r3, #1
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	e002      	b.n	80056ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056ba:	69bb      	ldr	r3, [r7, #24]
	}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056dc:	3b01      	subs	r3, #1
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <prvInitialiseNewTask+0x48>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	617b      	str	r3, [r7, #20]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e012      	b.n	8005738 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	7819      	ldrb	r1, [r3, #0]
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	3334      	adds	r3, #52	; 0x34
 8005722:	460a      	mov	r2, r1
 8005724:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b0f      	cmp	r3, #15
 800573c:	d9e9      	bls.n	8005712 <prvInitialiseNewTask+0x4e>
 800573e:	e000      	b.n	8005742 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005740:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	2b06      	cmp	r3, #6
 800574e:	d901      	bls.n	8005754 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005750:	2306      	movs	r3, #6
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2200      	movs	r2, #0
 8005764:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	3304      	adds	r3, #4
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fe79 	bl	8005462 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	3318      	adds	r3, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fe74 	bl	8005462 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	f1c3 0207 	rsb	r2, r3, #7
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	2200      	movs	r2, #0
 8005794:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	69b8      	ldr	r0, [r7, #24]
 80057a4:	f000 fc2c 	bl	8006000 <pxPortInitialiseStack>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ba:	bf00      	nop
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057cc:	f000 fd06 	bl	80061dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057d0:	4b2a      	ldr	r3, [pc, #168]	; (800587c <prvAddNewTaskToReadyList+0xb8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	4a29      	ldr	r2, [pc, #164]	; (800587c <prvAddNewTaskToReadyList+0xb8>)
 80057d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057da:	4b29      	ldr	r3, [pc, #164]	; (8005880 <prvAddNewTaskToReadyList+0xbc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057e2:	4a27      	ldr	r2, [pc, #156]	; (8005880 <prvAddNewTaskToReadyList+0xbc>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057e8:	4b24      	ldr	r3, [pc, #144]	; (800587c <prvAddNewTaskToReadyList+0xb8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d110      	bne.n	8005812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057f0:	f000 fac0 	bl	8005d74 <prvInitialiseTaskLists>
 80057f4:	e00d      	b.n	8005812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057f6:	4b23      	ldr	r3, [pc, #140]	; (8005884 <prvAddNewTaskToReadyList+0xc0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057fe:	4b20      	ldr	r3, [pc, #128]	; (8005880 <prvAddNewTaskToReadyList+0xbc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	429a      	cmp	r2, r3
 800580a:	d802      	bhi.n	8005812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <prvAddNewTaskToReadyList+0xbc>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <prvAddNewTaskToReadyList+0xc4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <prvAddNewTaskToReadyList+0xc4>)
 800581a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	4b19      	ldr	r3, [pc, #100]	; (800588c <prvAddNewTaskToReadyList+0xc8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <prvAddNewTaskToReadyList+0xc8>)
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4a15      	ldr	r2, [pc, #84]	; (8005890 <prvAddNewTaskToReadyList+0xcc>)
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7ff fe18 	bl	800547a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800584a:	f000 fcf7 	bl	800623c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <prvAddNewTaskToReadyList+0xc0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00e      	beq.n	8005874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <prvAddNewTaskToReadyList+0xbc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	429a      	cmp	r2, r3
 8005862:	d207      	bcs.n	8005874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <prvAddNewTaskToReadyList+0xd0>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000844 	.word	0x20000844
 8005880:	20000744 	.word	0x20000744
 8005884:	20000850 	.word	0x20000850
 8005888:	20000860 	.word	0x20000860
 800588c:	2000084c 	.word	0x2000084c
 8005890:	20000748 	.word	0x20000748
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d017      	beq.n	80058da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <vTaskDelay+0x60>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <vTaskDelay+0x30>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60bb      	str	r3, [r7, #8]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058c8:	f000 f87a 	bl	80059c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058cc:	2100      	movs	r1, #0
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb30 	bl	8005f34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058d4:	f000 f882 	bl	80059dc <xTaskResumeAll>
 80058d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <vTaskDelay+0x64>)
 80058e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	2000086c 	.word	0x2000086c
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800590e:	463a      	mov	r2, r7
 8005910:	1d39      	adds	r1, r7, #4
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	4618      	mov	r0, r3
 8005918:	f7fb fa5a 	bl	8000dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	9202      	str	r2, [sp, #8]
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	2300      	movs	r3, #0
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	2300      	movs	r3, #0
 800592c:	460a      	mov	r2, r1
 800592e:	491e      	ldr	r1, [pc, #120]	; (80059a8 <vTaskStartScheduler+0xa8>)
 8005930:	481e      	ldr	r0, [pc, #120]	; (80059ac <vTaskStartScheduler+0xac>)
 8005932:	f7ff fe26 	bl	8005582 <xTaskCreateStatic>
 8005936:	4603      	mov	r3, r0
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <vTaskStartScheduler+0xb0>)
 800593a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800593c:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <vTaskStartScheduler+0xb0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005944:	2301      	movs	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e001      	b.n	800594e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d116      	bne.n	8005982 <vTaskStartScheduler+0x82>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	613b      	str	r3, [r7, #16]
}
 8005966:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <vTaskStartScheduler+0xb4>)
 800596a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <vTaskStartScheduler+0xb8>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <vTaskStartScheduler+0xbc>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800597c:	f000 fbbc 	bl	80060f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005980:	e00e      	b.n	80059a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005988:	d10a      	bne.n	80059a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <vTaskStartScheduler+0x9e>
}
 80059a0:	bf00      	nop
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08007274 	.word	0x08007274
 80059ac:	08005d45 	.word	0x08005d45
 80059b0:	20000868 	.word	0x20000868
 80059b4:	20000864 	.word	0x20000864
 80059b8:	20000850 	.word	0x20000850
 80059bc:	20000848 	.word	0x20000848

080059c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <vTaskSuspendAll+0x18>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <vTaskSuspendAll+0x18>)
 80059cc:	6013      	str	r3, [r2, #0]
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	2000086c 	.word	0x2000086c

080059dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059ea:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <xTaskResumeAll+0x114>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <xTaskResumeAll+0x2c>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	603b      	str	r3, [r7, #0]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a08:	f000 fbe8 	bl	80061dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a0c:	4b38      	ldr	r3, [pc, #224]	; (8005af0 <xTaskResumeAll+0x114>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	4a37      	ldr	r2, [pc, #220]	; (8005af0 <xTaskResumeAll+0x114>)
 8005a14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <xTaskResumeAll+0x114>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d161      	bne.n	8005ae2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a1e:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <xTaskResumeAll+0x118>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d05d      	beq.n	8005ae2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a26:	e02e      	b.n	8005a86 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a28:	4b33      	ldr	r3, [pc, #204]	; (8005af8 <xTaskResumeAll+0x11c>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3318      	adds	r3, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fd7b 	bl	8005530 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fd76 	bl	8005530 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	2201      	movs	r2, #1
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <xTaskResumeAll+0x120>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <xTaskResumeAll+0x120>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <xTaskResumeAll+0x124>)
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7ff fd04 	bl	800547a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <xTaskResumeAll+0x128>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a80:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <xTaskResumeAll+0x12c>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a86:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <xTaskResumeAll+0x11c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1cc      	bne.n	8005a28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a94:	f000 fa0c 	bl	8005eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a98:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <xTaskResumeAll+0x130>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005aa4:	f000 f836 	bl	8005b14 <xTaskIncrementTick>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <xTaskResumeAll+0x12c>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f1      	bne.n	8005aa4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <xTaskResumeAll+0x130>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <xTaskResumeAll+0x12c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <xTaskResumeAll+0x134>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ae2:	f000 fbab 	bl	800623c <vPortExitCritical>

	return xAlreadyYielded;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2000086c 	.word	0x2000086c
 8005af4:	20000844 	.word	0x20000844
 8005af8:	20000804 	.word	0x20000804
 8005afc:	2000084c 	.word	0x2000084c
 8005b00:	20000748 	.word	0x20000748
 8005b04:	20000744 	.word	0x20000744
 8005b08:	20000858 	.word	0x20000858
 8005b0c:	20000854 	.word	0x20000854
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b1e:	4b51      	ldr	r3, [pc, #324]	; (8005c64 <xTaskIncrementTick+0x150>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 808d 	bne.w	8005c42 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b28:	4b4f      	ldr	r3, [pc, #316]	; (8005c68 <xTaskIncrementTick+0x154>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b30:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <xTaskIncrementTick+0x154>)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d120      	bne.n	8005b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b3c:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <xTaskIncrementTick+0x158>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	603b      	str	r3, [r7, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <xTaskIncrementTick+0x46>
 8005b5c:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <xTaskIncrementTick+0x158>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <xTaskIncrementTick+0x15c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a41      	ldr	r2, [pc, #260]	; (8005c6c <xTaskIncrementTick+0x158>)
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4a41      	ldr	r2, [pc, #260]	; (8005c70 <xTaskIncrementTick+0x15c>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b40      	ldr	r3, [pc, #256]	; (8005c74 <xTaskIncrementTick+0x160>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	4a3f      	ldr	r2, [pc, #252]	; (8005c74 <xTaskIncrementTick+0x160>)
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	f000 f999 	bl	8005eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <xTaskIncrementTick+0x164>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d34d      	bcc.n	8005c24 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b88:	4b38      	ldr	r3, [pc, #224]	; (8005c6c <xTaskIncrementTick+0x158>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xTaskIncrementTick+0x82>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xTaskIncrementTick+0x84>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9c:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <xTaskIncrementTick+0x164>)
 8005b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba2:	601a      	str	r2, [r3, #0]
					break;
 8005ba4:	e03e      	b.n	8005c24 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ba6:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <xTaskIncrementTick+0x158>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d203      	bcs.n	8005bc6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bbe:	4a2e      	ldr	r2, [pc, #184]	; (8005c78 <xTaskIncrementTick+0x164>)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6013      	str	r3, [r2, #0]
						break;
 8005bc4:	e02e      	b.n	8005c24 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fcb0 	bl	8005530 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fca7 	bl	8005530 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	2201      	movs	r2, #1
 8005be8:	409a      	lsls	r2, r3
 8005bea:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <xTaskIncrementTick+0x168>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <xTaskIncrementTick+0x168>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <xTaskIncrementTick+0x16c>)
 8005c02:	441a      	add	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7ff fc35 	bl	800547a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <xTaskIncrementTick+0x170>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3b4      	bcc.n	8005b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c22:	e7b1      	b.n	8005b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c24:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <xTaskIncrementTick+0x170>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	4915      	ldr	r1, [pc, #84]	; (8005c80 <xTaskIncrementTick+0x16c>)
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d907      	bls.n	8005c4c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e004      	b.n	8005c4c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <xTaskIncrementTick+0x174>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a0f      	ldr	r2, [pc, #60]	; (8005c88 <xTaskIncrementTick+0x174>)
 8005c4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <xTaskIncrementTick+0x178>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c58:	697b      	ldr	r3, [r7, #20]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000086c 	.word	0x2000086c
 8005c68:	20000848 	.word	0x20000848
 8005c6c:	200007fc 	.word	0x200007fc
 8005c70:	20000800 	.word	0x20000800
 8005c74:	2000085c 	.word	0x2000085c
 8005c78:	20000864 	.word	0x20000864
 8005c7c:	2000084c 	.word	0x2000084c
 8005c80:	20000748 	.word	0x20000748
 8005c84:	20000744 	.word	0x20000744
 8005c88:	20000854 	.word	0x20000854
 8005c8c:	20000858 	.word	0x20000858

08005c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c96:	4b26      	ldr	r3, [pc, #152]	; (8005d30 <vTaskSwitchContext+0xa0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c9e:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <vTaskSwitchContext+0xa4>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ca4:	e03f      	b.n	8005d26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005ca6:	4b23      	ldr	r3, [pc, #140]	; (8005d34 <vTaskSwitchContext+0xa4>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005cac:	4b22      	ldr	r3, [pc, #136]	; (8005d38 <vTaskSwitchContext+0xa8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	fab3 f383 	clz	r3, r3
 8005cb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005cba:	7afb      	ldrb	r3, [r7, #11]
 8005cbc:	f1c3 031f 	rsb	r3, r3, #31
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	491e      	ldr	r1, [pc, #120]	; (8005d3c <vTaskSwitchContext+0xac>)
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <vTaskSwitchContext+0x5c>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	607b      	str	r3, [r7, #4]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <vTaskSwitchContext+0x5a>
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <vTaskSwitchContext+0xac>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d104      	bne.n	8005d1c <vTaskSwitchContext+0x8c>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <vTaskSwitchContext+0xb0>)
 8005d24:	6013      	str	r3, [r2, #0]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr
 8005d30:	2000086c 	.word	0x2000086c
 8005d34:	20000858 	.word	0x20000858
 8005d38:	2000084c 	.word	0x2000084c
 8005d3c:	20000748 	.word	0x20000748
 8005d40:	20000744 	.word	0x20000744

08005d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d4c:	f000 f852 	bl	8005df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <prvIdleTask+0x28>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d9f9      	bls.n	8005d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <prvIdleTask+0x2c>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d68:	e7f0      	b.n	8005d4c <prvIdleTask+0x8>
 8005d6a:	bf00      	nop
 8005d6c:	20000748 	.word	0x20000748
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	e00c      	b.n	8005d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <prvInitialiseTaskLists+0x60>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fb48 	bl	8005424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3301      	adds	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b06      	cmp	r3, #6
 8005d9e:	d9ef      	bls.n	8005d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da0:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <prvInitialiseTaskLists+0x64>)
 8005da2:	f7ff fb3f 	bl	8005424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005da6:	480d      	ldr	r0, [pc, #52]	; (8005ddc <prvInitialiseTaskLists+0x68>)
 8005da8:	f7ff fb3c 	bl	8005424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dac:	480c      	ldr	r0, [pc, #48]	; (8005de0 <prvInitialiseTaskLists+0x6c>)
 8005dae:	f7ff fb39 	bl	8005424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005db2:	480c      	ldr	r0, [pc, #48]	; (8005de4 <prvInitialiseTaskLists+0x70>)
 8005db4:	f7ff fb36 	bl	8005424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005db8:	480b      	ldr	r0, [pc, #44]	; (8005de8 <prvInitialiseTaskLists+0x74>)
 8005dba:	f7ff fb33 	bl	8005424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <prvInitialiseTaskLists+0x78>)
 8005dc0:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <prvInitialiseTaskLists+0x64>)
 8005dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <prvInitialiseTaskLists+0x7c>)
 8005dc6:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <prvInitialiseTaskLists+0x68>)
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000748 	.word	0x20000748
 8005dd8:	200007d4 	.word	0x200007d4
 8005ddc:	200007e8 	.word	0x200007e8
 8005de0:	20000804 	.word	0x20000804
 8005de4:	20000818 	.word	0x20000818
 8005de8:	20000830 	.word	0x20000830
 8005dec:	200007fc 	.word	0x200007fc
 8005df0:	20000800 	.word	0x20000800

08005df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfa:	e019      	b.n	8005e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dfc:	f000 f9ee 	bl	80061dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <prvCheckTasksWaitingTermination+0x50>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fb8f 	bl	8005530 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e12:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <prvCheckTasksWaitingTermination+0x54>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <prvCheckTasksWaitingTermination+0x54>)
 8005e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <prvCheckTasksWaitingTermination+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <prvCheckTasksWaitingTermination+0x58>)
 8005e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e26:	f000 fa09 	bl	800623c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f810 	bl	8005e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <prvCheckTasksWaitingTermination+0x58>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e1      	bne.n	8005dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000818 	.word	0x20000818
 8005e48:	20000844 	.word	0x20000844
 8005e4c:	2000082c 	.word	0x2000082c

08005e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fb3e 	bl	80064e8 <vPortFree>
				vPortFree( pxTCB );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb3b 	bl	80064e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e72:	e018      	b.n	8005ea6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d103      	bne.n	8005e86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fb32 	bl	80064e8 <vPortFree>
	}
 8005e84:	e00f      	b.n	8005ea6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d00a      	beq.n	8005ea6 <prvDeleteTCB+0x56>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60fb      	str	r3, [r7, #12]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <prvDeleteTCB+0x54>
	}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <prvResetNextTaskUnblockTime+0x40>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <prvResetNextTaskUnblockTime+0x14>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <prvResetNextTaskUnblockTime+0x16>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvResetNextTaskUnblockTime+0x44>)
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ed0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ed2:	e008      	b.n	8005ee6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <prvResetNextTaskUnblockTime+0x40>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <prvResetNextTaskUnblockTime+0x44>)
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	200007fc 	.word	0x200007fc
 8005ef4:	20000864 	.word	0x20000864

08005ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <xTaskGetSchedulerState+0x34>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f06:	2301      	movs	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	e008      	b.n	8005f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f0c:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <xTaskGetSchedulerState+0x38>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f14:	2302      	movs	r3, #2
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e001      	b.n	8005f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f1e:	687b      	ldr	r3, [r7, #4]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000850 	.word	0x20000850
 8005f30:	2000086c 	.word	0x2000086c

08005f34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f3e:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f44:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff faf0 	bl	8005530 <uxListRemove>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f56:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43da      	mvns	r2, r3
 8005f64:	4b21      	ldr	r3, [pc, #132]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f74:	d10a      	bne.n	8005f8c <prvAddCurrentTaskToDelayedList+0x58>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4619      	mov	r1, r3
 8005f84:	481a      	ldr	r0, [pc, #104]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f86:	f7ff fa78 	bl	800547a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f8a:	e026      	b.n	8005fda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f94:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d209      	bcs.n	8005fb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa4:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7ff fa85 	bl	80054c0 <vListInsert>
}
 8005fb6:	e010      	b.n	8005fda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f7ff fa7b 	bl	80054c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fca:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d202      	bcs.n	8005fda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005fd4:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6013      	str	r3, [r2, #0]
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000848 	.word	0x20000848
 8005fe8:	20000744 	.word	0x20000744
 8005fec:	2000084c 	.word	0x2000084c
 8005ff0:	20000830 	.word	0x20000830
 8005ff4:	20000800 	.word	0x20000800
 8005ff8:	200007fc 	.word	0x200007fc
 8005ffc:	20000864 	.word	0x20000864

08006000 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b04      	subs	r3, #4
 8006010:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3b04      	subs	r3, #4
 800601e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b04      	subs	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006030:	4a08      	ldr	r2, [pc, #32]	; (8006054 <pxPortInitialiseStack+0x54>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b14      	subs	r3, #20
 800603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3b20      	subs	r3, #32
 8006046:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006048:	68fb      	ldr	r3, [r7, #12]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	08006059 	.word	0x08006059

08006058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006062:	4b12      	ldr	r3, [pc, #72]	; (80060ac <prvTaskExitError+0x54>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800606a:	d00a      	beq.n	8006082 <prvTaskExitError+0x2a>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60fb      	str	r3, [r7, #12]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <prvTaskExitError+0x28>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60bb      	str	r3, [r7, #8]
}
 8006094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006096:	bf00      	nop
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0fc      	beq.n	8006098 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	2000002c 	.word	0x2000002c

080060b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <pxCurrentTCBConst2>)
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	6808      	ldr	r0, [r1, #0]
 80060b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060ba:	f380 8809 	msr	PSP, r0
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80060ce:	4770      	bx	lr

080060d0 <pxCurrentTCBConst2>:
 80060d0:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80060d8:	4806      	ldr	r0, [pc, #24]	; (80060f4 <prvPortStartFirstTask+0x1c>)
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	6800      	ldr	r0, [r0, #0]
 80060de:	f380 8808 	msr	MSP, r0
 80060e2:	b662      	cpsie	i
 80060e4:	b661      	cpsie	f
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	df00      	svc	0
 80060f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060f2:	bf00      	nop
 80060f4:	e000ed08 	.word	0xe000ed08

080060f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060fe:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <xPortStartScheduler+0xd0>)
 8006100:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	22ff      	movs	r2, #255	; 0xff
 800610e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006120:	b2da      	uxtb	r2, r3
 8006122:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <xPortStartScheduler+0xd4>)
 8006124:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006126:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006128:	2207      	movs	r2, #7
 800612a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612c:	e009      	b.n	8006142 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3b01      	subs	r3, #1
 8006134:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006136:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d0ef      	beq.n	800612e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800614e:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1c3 0307 	rsb	r3, r3, #7
 8006156:	2b04      	cmp	r3, #4
 8006158:	d00a      	beq.n	8006170 <xPortStartScheduler+0x78>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	60bb      	str	r3, [r7, #8]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006178:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <xPortStartScheduler+0xd8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006182:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <xPortStartScheduler+0xd8>)
 8006184:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <xPortStartScheduler+0xdc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <xPortStartScheduler+0xdc>)
 8006194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006198:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <xPortStartScheduler+0xdc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a0d      	ldr	r2, [pc, #52]	; (80061d4 <xPortStartScheduler+0xdc>)
 80061a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061a6:	f000 f8b9 	bl	800631c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <xPortStartScheduler+0xe0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061b0:	f7ff ff92 	bl	80060d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061b4:	f7ff fd6c 	bl	8005c90 <vTaskSwitchContext>
	prvTaskExitError();
 80061b8:	f7ff ff4e 	bl	8006058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	e000e400 	.word	0xe000e400
 80061cc:	20000870 	.word	0x20000870
 80061d0:	20000874 	.word	0x20000874
 80061d4:	e000ed20 	.word	0xe000ed20
 80061d8:	2000002c 	.word	0x2000002c

080061dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061f6:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <vPortEnterCritical+0x58>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	4a0d      	ldr	r2, [pc, #52]	; (8006234 <vPortEnterCritical+0x58>)
 80061fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <vPortEnterCritical+0x58>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d10f      	bne.n	8006228 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <vPortEnterCritical+0x5c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <vPortEnterCritical+0x4c>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	603b      	str	r3, [r7, #0]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <vPortEnterCritical+0x4a>
	}
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000002c 	.word	0x2000002c
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006242:	4b11      	ldr	r3, [pc, #68]	; (8006288 <vPortExitCritical+0x4c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <vPortExitCritical+0x24>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	607b      	str	r3, [r7, #4]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <vPortExitCritical+0x4c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3b01      	subs	r3, #1
 8006266:	4a08      	ldr	r2, [pc, #32]	; (8006288 <vPortExitCritical+0x4c>)
 8006268:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <vPortExitCritical+0x4c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d105      	bne.n	800627e <vPortExitCritical+0x42>
 8006272:	2300      	movs	r3, #0
 8006274:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800627c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr
 8006288:	2000002c 	.word	0x2000002c
 800628c:	00000000 	.word	0x00000000

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062a0:	6010      	str	r0, [r2, #0]
 80062a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062aa:	f380 8811 	msr	BASEPRI, r0
 80062ae:	f7ff fcef 	bl	8005c90 <vTaskSwitchContext>
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8811 	msr	BASEPRI, r0
 80062ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062c6:	f380 8809 	msr	PSP, r0
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	4770      	bx	lr

080062d0 <pxCurrentTCBConst>:
 80062d0:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
}
 80062f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062f2:	f7ff fc0f 	bl	8005b14 <xTaskIncrementTick>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <xPortSysTickHandler+0x40>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f383 8811 	msr	BASEPRI, r3
}
 800630e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <vPortSetupTimerInterrupt+0x30>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <vPortSetupTimerInterrupt+0x34>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800632c:	4b09      	ldr	r3, [pc, #36]	; (8006354 <vPortSetupTimerInterrupt+0x38>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a09      	ldr	r2, [pc, #36]	; (8006358 <vPortSetupTimerInterrupt+0x3c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	4a08      	ldr	r2, [pc, #32]	; (800635c <vPortSetupTimerInterrupt+0x40>)
 800633a:	3b01      	subs	r3, #1
 800633c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800633e:	4b03      	ldr	r3, [pc, #12]	; (800634c <vPortSetupTimerInterrupt+0x30>)
 8006340:	2207      	movs	r2, #7
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr
 800634c:	e000e010 	.word	0xe000e010
 8006350:	e000e018 	.word	0xe000e018
 8006354:	20000020 	.word	0x20000020
 8006358:	10624dd3 	.word	0x10624dd3
 800635c:	e000e014 	.word	0xe000e014

08006360 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006368:	2300      	movs	r3, #0
 800636a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800636c:	f7ff fb28 	bl	80059c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006370:	4b58      	ldr	r3, [pc, #352]	; (80064d4 <pvPortMalloc+0x174>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006378:	f000 f910 	bl	800659c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800637c:	4b56      	ldr	r3, [pc, #344]	; (80064d8 <pvPortMalloc+0x178>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 808e 	bne.w	80064a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01d      	beq.n	80063cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006390:	2208      	movs	r2, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d014      	beq.n	80063cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f023 0307 	bic.w	r3, r3, #7
 80063a8:	3308      	adds	r3, #8
 80063aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <pvPortMalloc+0x6c>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d069      	beq.n	80064a6 <pvPortMalloc+0x146>
 80063d2:	4b42      	ldr	r3, [pc, #264]	; (80064dc <pvPortMalloc+0x17c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d864      	bhi.n	80064a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063dc:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <pvPortMalloc+0x180>)
 80063de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063e0:	4b3f      	ldr	r3, [pc, #252]	; (80064e0 <pvPortMalloc+0x180>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e6:	e004      	b.n	80063f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d903      	bls.n	8006404 <pvPortMalloc+0xa4>
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f1      	bne.n	80063e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006404:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <pvPortMalloc+0x174>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	429a      	cmp	r2, r3
 800640c:	d04b      	beq.n	80064a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2208      	movs	r2, #8
 8006414:	4413      	add	r3, r2
 8006416:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	2308      	movs	r3, #8
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	429a      	cmp	r2, r3
 800642e:	d91f      	bls.n	8006470 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <pvPortMalloc+0xf8>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	613b      	str	r3, [r7, #16]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800646a:	69b8      	ldr	r0, [r7, #24]
 800646c:	f000 f8f8 	bl	8006660 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <pvPortMalloc+0x17c>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <pvPortMalloc+0x17c>)
 800647c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <pvPortMalloc+0x17c>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <pvPortMalloc+0x184>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d203      	bcs.n	8006492 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <pvPortMalloc+0x17c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <pvPortMalloc+0x184>)
 8006490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <pvPortMalloc+0x178>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	431a      	orrs	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064a6:	f7ff fa99 	bl	80059dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <pvPortMalloc+0x16a>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <pvPortMalloc+0x168>
	return pvReturn;
 80064ca:	69fb      	ldr	r3, [r7, #28]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3728      	adds	r7, #40	; 0x28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20001480 	.word	0x20001480
 80064d8:	2000148c 	.word	0x2000148c
 80064dc:	20001484 	.word	0x20001484
 80064e0:	20001478 	.word	0x20001478
 80064e4:	20001488 	.word	0x20001488

080064e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d048      	beq.n	800658c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064fa:	2308      	movs	r3, #8
 80064fc:	425b      	negs	r3, r3
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <vPortFree+0xac>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <vPortFree+0x44>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <vPortFree+0x62>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60bb      	str	r3, [r7, #8]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	4b11      	ldr	r3, [pc, #68]	; (8006594 <vPortFree+0xac>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d019      	beq.n	800658c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d115      	bne.n	800658c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <vPortFree+0xac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	43db      	mvns	r3, r3
 800656a:	401a      	ands	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006570:	f7ff fa26 	bl	80059c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <vPortFree+0xb0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4413      	add	r3, r2
 800657e:	4a06      	ldr	r2, [pc, #24]	; (8006598 <vPortFree+0xb0>)
 8006580:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006582:	6938      	ldr	r0, [r7, #16]
 8006584:	f000 f86c 	bl	8006660 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006588:	f7ff fa28 	bl	80059dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800658c:	bf00      	nop
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	2000148c 	.word	0x2000148c
 8006598:	20001484 	.word	0x20001484

0800659c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a8:	4b27      	ldr	r3, [pc, #156]	; (8006648 <prvHeapInit+0xac>)
 80065aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3307      	adds	r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <prvHeapInit+0xac>)
 80065cc:	4413      	add	r3, r2
 80065ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065d4:	4a1d      	ldr	r2, [pc, #116]	; (800664c <prvHeapInit+0xb0>)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <prvHeapInit+0xb0>)
 80065dc:	2200      	movs	r2, #0
 80065de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e8:	2208      	movs	r2, #8
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0307 	bic.w	r3, r3, #7
 80065f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a15      	ldr	r2, [pc, #84]	; (8006650 <prvHeapInit+0xb4>)
 80065fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <prvHeapInit+0xb4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <prvHeapInit+0xb4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <prvHeapInit+0xb4>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a0a      	ldr	r2, [pc, #40]	; (8006654 <prvHeapInit+0xb8>)
 800662a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <prvHeapInit+0xbc>)
 8006632:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006634:	4b09      	ldr	r3, [pc, #36]	; (800665c <prvHeapInit+0xc0>)
 8006636:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800663a:	601a      	str	r2, [r3, #0]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000878 	.word	0x20000878
 800664c:	20001478 	.word	0x20001478
 8006650:	20001480 	.word	0x20001480
 8006654:	20001488 	.word	0x20001488
 8006658:	20001484 	.word	0x20001484
 800665c:	2000148c 	.word	0x2000148c

08006660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006668:	4b27      	ldr	r3, [pc, #156]	; (8006708 <prvInsertBlockIntoFreeList+0xa8>)
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e002      	b.n	8006674 <prvInsertBlockIntoFreeList+0x14>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	429a      	cmp	r2, r3
 800667c:	d8f7      	bhi.n	800666e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4413      	add	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d108      	bne.n	80066a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	441a      	add	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	441a      	add	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d118      	bne.n	80066e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b14      	ldr	r3, [pc, #80]	; (800670c <prvInsertBlockIntoFreeList+0xac>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d00d      	beq.n	80066de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e008      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <prvInsertBlockIntoFreeList+0xac>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e003      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d002      	beq.n	80066fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr
 8006708:	20001478 	.word	0x20001478
 800670c:	20001480 	.word	0x20001480

08006710 <__errno>:
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <__errno+0x8>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000030 	.word	0x20000030

0800671c <__libc_init_array>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	2600      	movs	r6, #0
 8006720:	4d0c      	ldr	r5, [pc, #48]	; (8006754 <__libc_init_array+0x38>)
 8006722:	4c0d      	ldr	r4, [pc, #52]	; (8006758 <__libc_init_array+0x3c>)
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	42a6      	cmp	r6, r4
 800672a:	d109      	bne.n	8006740 <__libc_init_array+0x24>
 800672c:	f000 fd34 	bl	8007198 <_init>
 8006730:	2600      	movs	r6, #0
 8006732:	4d0a      	ldr	r5, [pc, #40]	; (800675c <__libc_init_array+0x40>)
 8006734:	4c0a      	ldr	r4, [pc, #40]	; (8006760 <__libc_init_array+0x44>)
 8006736:	1b64      	subs	r4, r4, r5
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	42a6      	cmp	r6, r4
 800673c:	d105      	bne.n	800674a <__libc_init_array+0x2e>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	f855 3b04 	ldr.w	r3, [r5], #4
 8006744:	4798      	blx	r3
 8006746:	3601      	adds	r6, #1
 8006748:	e7ee      	b.n	8006728 <__libc_init_array+0xc>
 800674a:	f855 3b04 	ldr.w	r3, [r5], #4
 800674e:	4798      	blx	r3
 8006750:	3601      	adds	r6, #1
 8006752:	e7f2      	b.n	800673a <__libc_init_array+0x1e>
 8006754:	08008024 	.word	0x08008024
 8006758:	08008024 	.word	0x08008024
 800675c:	08008024 	.word	0x08008024
 8006760:	08008028 	.word	0x08008028

08006764 <memcpy>:
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800676c:	d100      	bne.n	8006770 <memcpy+0xc>
 800676e:	4770      	bx	lr
 8006770:	b510      	push	{r4, lr}
 8006772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006776:	4291      	cmp	r1, r2
 8006778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800677c:	d1f9      	bne.n	8006772 <memcpy+0xe>
 800677e:	bd10      	pop	{r4, pc}

08006780 <memset>:
 8006780:	4603      	mov	r3, r0
 8006782:	4402      	add	r2, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <siprintf>:
 8006790:	b40e      	push	{r1, r2, r3}
 8006792:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006796:	b500      	push	{lr}
 8006798:	b09c      	sub	sp, #112	; 0x70
 800679a:	ab1d      	add	r3, sp, #116	; 0x74
 800679c:	9002      	str	r0, [sp, #8]
 800679e:	9006      	str	r0, [sp, #24]
 80067a0:	9107      	str	r1, [sp, #28]
 80067a2:	9104      	str	r1, [sp, #16]
 80067a4:	4808      	ldr	r0, [pc, #32]	; (80067c8 <siprintf+0x38>)
 80067a6:	4909      	ldr	r1, [pc, #36]	; (80067cc <siprintf+0x3c>)
 80067a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ac:	9105      	str	r1, [sp, #20]
 80067ae:	6800      	ldr	r0, [r0, #0]
 80067b0:	a902      	add	r1, sp, #8
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	f000 f868 	bl	8006888 <_svfiprintf_r>
 80067b8:	2200      	movs	r2, #0
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	b01c      	add	sp, #112	; 0x70
 80067c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067c4:	b003      	add	sp, #12
 80067c6:	4770      	bx	lr
 80067c8:	20000030 	.word	0x20000030
 80067cc:	ffff0208 	.word	0xffff0208

080067d0 <__ssputs_r>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	688e      	ldr	r6, [r1, #8]
 80067d6:	4682      	mov	sl, r0
 80067d8:	429e      	cmp	r6, r3
 80067da:	460c      	mov	r4, r1
 80067dc:	4690      	mov	r8, r2
 80067de:	461f      	mov	r7, r3
 80067e0:	d838      	bhi.n	8006854 <__ssputs_r+0x84>
 80067e2:	898a      	ldrh	r2, [r1, #12]
 80067e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067e8:	d032      	beq.n	8006850 <__ssputs_r+0x80>
 80067ea:	6825      	ldr	r5, [r4, #0]
 80067ec:	6909      	ldr	r1, [r1, #16]
 80067ee:	3301      	adds	r3, #1
 80067f0:	eba5 0901 	sub.w	r9, r5, r1
 80067f4:	6965      	ldr	r5, [r4, #20]
 80067f6:	444b      	add	r3, r9
 80067f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006800:	106d      	asrs	r5, r5, #1
 8006802:	429d      	cmp	r5, r3
 8006804:	bf38      	it	cc
 8006806:	461d      	movcc	r5, r3
 8006808:	0553      	lsls	r3, r2, #21
 800680a:	d531      	bpl.n	8006870 <__ssputs_r+0xa0>
 800680c:	4629      	mov	r1, r5
 800680e:	f000 fb45 	bl	8006e9c <_malloc_r>
 8006812:	4606      	mov	r6, r0
 8006814:	b950      	cbnz	r0, 800682c <__ssputs_r+0x5c>
 8006816:	230c      	movs	r3, #12
 8006818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800681c:	f8ca 3000 	str.w	r3, [sl]
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682c:	464a      	mov	r2, r9
 800682e:	6921      	ldr	r1, [r4, #16]
 8006830:	f7ff ff98 	bl	8006764 <memcpy>
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800683a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	6126      	str	r6, [r4, #16]
 8006842:	444e      	add	r6, r9
 8006844:	6026      	str	r6, [r4, #0]
 8006846:	463e      	mov	r6, r7
 8006848:	6165      	str	r5, [r4, #20]
 800684a:	eba5 0509 	sub.w	r5, r5, r9
 800684e:	60a5      	str	r5, [r4, #8]
 8006850:	42be      	cmp	r6, r7
 8006852:	d900      	bls.n	8006856 <__ssputs_r+0x86>
 8006854:	463e      	mov	r6, r7
 8006856:	4632      	mov	r2, r6
 8006858:	4641      	mov	r1, r8
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	f000 fab8 	bl	8006dd0 <memmove>
 8006860:	68a3      	ldr	r3, [r4, #8]
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	1b9b      	subs	r3, r3, r6
 8006866:	4432      	add	r2, r6
 8006868:	2000      	movs	r0, #0
 800686a:	60a3      	str	r3, [r4, #8]
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	e7db      	b.n	8006828 <__ssputs_r+0x58>
 8006870:	462a      	mov	r2, r5
 8006872:	f000 fb6d 	bl	8006f50 <_realloc_r>
 8006876:	4606      	mov	r6, r0
 8006878:	2800      	cmp	r0, #0
 800687a:	d1e1      	bne.n	8006840 <__ssputs_r+0x70>
 800687c:	4650      	mov	r0, sl
 800687e:	6921      	ldr	r1, [r4, #16]
 8006880:	f000 fac0 	bl	8006e04 <_free_r>
 8006884:	e7c7      	b.n	8006816 <__ssputs_r+0x46>
	...

08006888 <_svfiprintf_r>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	4698      	mov	r8, r3
 800688e:	898b      	ldrh	r3, [r1, #12]
 8006890:	4607      	mov	r7, r0
 8006892:	061b      	lsls	r3, r3, #24
 8006894:	460d      	mov	r5, r1
 8006896:	4614      	mov	r4, r2
 8006898:	b09d      	sub	sp, #116	; 0x74
 800689a:	d50e      	bpl.n	80068ba <_svfiprintf_r+0x32>
 800689c:	690b      	ldr	r3, [r1, #16]
 800689e:	b963      	cbnz	r3, 80068ba <_svfiprintf_r+0x32>
 80068a0:	2140      	movs	r1, #64	; 0x40
 80068a2:	f000 fafb 	bl	8006e9c <_malloc_r>
 80068a6:	6028      	str	r0, [r5, #0]
 80068a8:	6128      	str	r0, [r5, #16]
 80068aa:	b920      	cbnz	r0, 80068b6 <_svfiprintf_r+0x2e>
 80068ac:	230c      	movs	r3, #12
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b4:	e0d1      	b.n	8006a5a <_svfiprintf_r+0x1d2>
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	616b      	str	r3, [r5, #20]
 80068ba:	2300      	movs	r3, #0
 80068bc:	9309      	str	r3, [sp, #36]	; 0x24
 80068be:	2320      	movs	r3, #32
 80068c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c4:	2330      	movs	r3, #48	; 0x30
 80068c6:	f04f 0901 	mov.w	r9, #1
 80068ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a74 <_svfiprintf_r+0x1ec>
 80068d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d6:	4623      	mov	r3, r4
 80068d8:	469a      	mov	sl, r3
 80068da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068de:	b10a      	cbz	r2, 80068e4 <_svfiprintf_r+0x5c>
 80068e0:	2a25      	cmp	r2, #37	; 0x25
 80068e2:	d1f9      	bne.n	80068d8 <_svfiprintf_r+0x50>
 80068e4:	ebba 0b04 	subs.w	fp, sl, r4
 80068e8:	d00b      	beq.n	8006902 <_svfiprintf_r+0x7a>
 80068ea:	465b      	mov	r3, fp
 80068ec:	4622      	mov	r2, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ff6d 	bl	80067d0 <__ssputs_r>
 80068f6:	3001      	adds	r0, #1
 80068f8:	f000 80aa 	beq.w	8006a50 <_svfiprintf_r+0x1c8>
 80068fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068fe:	445a      	add	r2, fp
 8006900:	9209      	str	r2, [sp, #36]	; 0x24
 8006902:	f89a 3000 	ldrb.w	r3, [sl]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80a2 	beq.w	8006a50 <_svfiprintf_r+0x1c8>
 800690c:	2300      	movs	r3, #0
 800690e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006916:	f10a 0a01 	add.w	sl, sl, #1
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	9307      	str	r3, [sp, #28]
 800691e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006922:	931a      	str	r3, [sp, #104]	; 0x68
 8006924:	4654      	mov	r4, sl
 8006926:	2205      	movs	r2, #5
 8006928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692c:	4851      	ldr	r0, [pc, #324]	; (8006a74 <_svfiprintf_r+0x1ec>)
 800692e:	f000 fa41 	bl	8006db4 <memchr>
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	b9d8      	cbnz	r0, 800696e <_svfiprintf_r+0xe6>
 8006936:	06d0      	lsls	r0, r2, #27
 8006938:	bf44      	itt	mi
 800693a:	2320      	movmi	r3, #32
 800693c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006940:	0711      	lsls	r1, r2, #28
 8006942:	bf44      	itt	mi
 8006944:	232b      	movmi	r3, #43	; 0x2b
 8006946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694a:	f89a 3000 	ldrb.w	r3, [sl]
 800694e:	2b2a      	cmp	r3, #42	; 0x2a
 8006950:	d015      	beq.n	800697e <_svfiprintf_r+0xf6>
 8006952:	4654      	mov	r4, sl
 8006954:	2000      	movs	r0, #0
 8006956:	f04f 0c0a 	mov.w	ip, #10
 800695a:	9a07      	ldr	r2, [sp, #28]
 800695c:	4621      	mov	r1, r4
 800695e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006962:	3b30      	subs	r3, #48	; 0x30
 8006964:	2b09      	cmp	r3, #9
 8006966:	d94e      	bls.n	8006a06 <_svfiprintf_r+0x17e>
 8006968:	b1b0      	cbz	r0, 8006998 <_svfiprintf_r+0x110>
 800696a:	9207      	str	r2, [sp, #28]
 800696c:	e014      	b.n	8006998 <_svfiprintf_r+0x110>
 800696e:	eba0 0308 	sub.w	r3, r0, r8
 8006972:	fa09 f303 	lsl.w	r3, r9, r3
 8006976:	4313      	orrs	r3, r2
 8006978:	46a2      	mov	sl, r4
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	e7d2      	b.n	8006924 <_svfiprintf_r+0x9c>
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	1d19      	adds	r1, r3, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	9103      	str	r1, [sp, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfbb      	ittet	lt
 800698a:	425b      	neglt	r3, r3
 800698c:	f042 0202 	orrlt.w	r2, r2, #2
 8006990:	9307      	strge	r3, [sp, #28]
 8006992:	9307      	strlt	r3, [sp, #28]
 8006994:	bfb8      	it	lt
 8006996:	9204      	strlt	r2, [sp, #16]
 8006998:	7823      	ldrb	r3, [r4, #0]
 800699a:	2b2e      	cmp	r3, #46	; 0x2e
 800699c:	d10c      	bne.n	80069b8 <_svfiprintf_r+0x130>
 800699e:	7863      	ldrb	r3, [r4, #1]
 80069a0:	2b2a      	cmp	r3, #42	; 0x2a
 80069a2:	d135      	bne.n	8006a10 <_svfiprintf_r+0x188>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	3402      	adds	r4, #2
 80069a8:	1d1a      	adds	r2, r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	9203      	str	r2, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfb8      	it	lt
 80069b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069b6:	9305      	str	r3, [sp, #20]
 80069b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a84 <_svfiprintf_r+0x1fc>
 80069bc:	2203      	movs	r2, #3
 80069be:	4650      	mov	r0, sl
 80069c0:	7821      	ldrb	r1, [r4, #0]
 80069c2:	f000 f9f7 	bl	8006db4 <memchr>
 80069c6:	b140      	cbz	r0, 80069da <_svfiprintf_r+0x152>
 80069c8:	2340      	movs	r3, #64	; 0x40
 80069ca:	eba0 000a 	sub.w	r0, r0, sl
 80069ce:	fa03 f000 	lsl.w	r0, r3, r0
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	3401      	adds	r4, #1
 80069d6:	4303      	orrs	r3, r0
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	2206      	movs	r2, #6
 80069e0:	4825      	ldr	r0, [pc, #148]	; (8006a78 <_svfiprintf_r+0x1f0>)
 80069e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e6:	f000 f9e5 	bl	8006db4 <memchr>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d038      	beq.n	8006a60 <_svfiprintf_r+0x1d8>
 80069ee:	4b23      	ldr	r3, [pc, #140]	; (8006a7c <_svfiprintf_r+0x1f4>)
 80069f0:	bb1b      	cbnz	r3, 8006a3a <_svfiprintf_r+0x1b2>
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	3307      	adds	r3, #7
 80069f6:	f023 0307 	bic.w	r3, r3, #7
 80069fa:	3308      	adds	r3, #8
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	4433      	add	r3, r6
 8006a02:	9309      	str	r3, [sp, #36]	; 0x24
 8006a04:	e767      	b.n	80068d6 <_svfiprintf_r+0x4e>
 8006a06:	460c      	mov	r4, r1
 8006a08:	2001      	movs	r0, #1
 8006a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a0e:	e7a5      	b.n	800695c <_svfiprintf_r+0xd4>
 8006a10:	2300      	movs	r3, #0
 8006a12:	f04f 0c0a 	mov.w	ip, #10
 8006a16:	4619      	mov	r1, r3
 8006a18:	3401      	adds	r4, #1
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a22:	3a30      	subs	r2, #48	; 0x30
 8006a24:	2a09      	cmp	r2, #9
 8006a26:	d903      	bls.n	8006a30 <_svfiprintf_r+0x1a8>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0c5      	beq.n	80069b8 <_svfiprintf_r+0x130>
 8006a2c:	9105      	str	r1, [sp, #20]
 8006a2e:	e7c3      	b.n	80069b8 <_svfiprintf_r+0x130>
 8006a30:	4604      	mov	r4, r0
 8006a32:	2301      	movs	r3, #1
 8006a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a38:	e7f0      	b.n	8006a1c <_svfiprintf_r+0x194>
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	462a      	mov	r2, r5
 8006a40:	4638      	mov	r0, r7
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <_svfiprintf_r+0x1f8>)
 8006a44:	a904      	add	r1, sp, #16
 8006a46:	f3af 8000 	nop.w
 8006a4a:	1c42      	adds	r2, r0, #1
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	d1d6      	bne.n	80069fe <_svfiprintf_r+0x176>
 8006a50:	89ab      	ldrh	r3, [r5, #12]
 8006a52:	065b      	lsls	r3, r3, #25
 8006a54:	f53f af2c 	bmi.w	80068b0 <_svfiprintf_r+0x28>
 8006a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a5a:	b01d      	add	sp, #116	; 0x74
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	ab03      	add	r3, sp, #12
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	462a      	mov	r2, r5
 8006a66:	4638      	mov	r0, r7
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <_svfiprintf_r+0x1f8>)
 8006a6a:	a904      	add	r1, sp, #16
 8006a6c:	f000 f87c 	bl	8006b68 <_printf_i>
 8006a70:	e7eb      	b.n	8006a4a <_svfiprintf_r+0x1c2>
 8006a72:	bf00      	nop
 8006a74:	08007ff0 	.word	0x08007ff0
 8006a78:	08007ffa 	.word	0x08007ffa
 8006a7c:	00000000 	.word	0x00000000
 8006a80:	080067d1 	.word	0x080067d1
 8006a84:	08007ff6 	.word	0x08007ff6

08006a88 <_printf_common>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	4699      	mov	r9, r3
 8006a90:	688a      	ldr	r2, [r1, #8]
 8006a92:	690b      	ldr	r3, [r1, #16]
 8006a94:	4607      	mov	r7, r0
 8006a96:	4293      	cmp	r3, r2
 8006a98:	bfb8      	it	lt
 8006a9a:	4613      	movlt	r3, r2
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa8:	b10a      	cbz	r2, 8006aae <_printf_common+0x26>
 8006aaa:	3301      	adds	r3, #1
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	0699      	lsls	r1, r3, #26
 8006ab2:	bf42      	ittt	mi
 8006ab4:	6833      	ldrmi	r3, [r6, #0]
 8006ab6:	3302      	addmi	r3, #2
 8006ab8:	6033      	strmi	r3, [r6, #0]
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	f015 0506 	ands.w	r5, r5, #6
 8006ac0:	d106      	bne.n	8006ad0 <_printf_common+0x48>
 8006ac2:	f104 0a19 	add.w	sl, r4, #25
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	6832      	ldr	r2, [r6, #0]
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	dc28      	bgt.n	8006b22 <_printf_common+0x9a>
 8006ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad4:	1e13      	subs	r3, r2, #0
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	bf18      	it	ne
 8006ada:	2301      	movne	r3, #1
 8006adc:	0692      	lsls	r2, r2, #26
 8006ade:	d42d      	bmi.n	8006b3c <_printf_common+0xb4>
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae8:	47c0      	blx	r8
 8006aea:	3001      	adds	r0, #1
 8006aec:	d020      	beq.n	8006b30 <_printf_common+0xa8>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	68e5      	ldr	r5, [r4, #12]
 8006af2:	f003 0306 	and.w	r3, r3, #6
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	bf18      	it	ne
 8006afa:	2500      	movne	r5, #0
 8006afc:	6832      	ldr	r2, [r6, #0]
 8006afe:	f04f 0600 	mov.w	r6, #0
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	bf08      	it	eq
 8006b06:	1aad      	subeq	r5, r5, r2
 8006b08:	6922      	ldr	r2, [r4, #16]
 8006b0a:	bf08      	it	eq
 8006b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b10:	4293      	cmp	r3, r2
 8006b12:	bfc4      	itt	gt
 8006b14:	1a9b      	subgt	r3, r3, r2
 8006b16:	18ed      	addgt	r5, r5, r3
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xcc>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xac>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4649      	mov	r1, r9
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c0      	blx	r8
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xb0>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c4      	b.n	8006ac6 <_printf_common+0x3e>
 8006b3c:	2030      	movs	r0, #48	; 0x30
 8006b3e:	18e1      	adds	r1, r4, r3
 8006b40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b4a:	4422      	add	r2, r4
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b52:	e7c5      	b.n	8006ae0 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa8>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x92>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	7e27      	ldrb	r7, [r4, #24]
 8006b70:	4691      	mov	r9, r2
 8006b72:	2f78      	cmp	r7, #120	; 0x78
 8006b74:	4680      	mov	r8, r0
 8006b76:	469a      	mov	sl, r3
 8006b78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	; 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d9 	beq.w	8006d3c <_printf_i+0x1d4>
 8006b8a:	2f58      	cmp	r7, #88	; 0x58
 8006b8c:	f000 80a4 	beq.w	8006cd8 <_printf_i+0x170>
 8006b90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a001      	add	r0, pc, #4	; (adr r0, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d23 	.word	0x08006d23
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006d05 	.word	0x08006d05
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d45 	.word	0x08006d45
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006d0d 	.word	0x08006d0d
 8006c00:	680b      	ldr	r3, [r1, #0]
 8006c02:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	600a      	str	r2, [r1, #0]
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0a4      	b.n	8006d5e <_printf_i+0x1f6>
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	6808      	ldr	r0, [r1, #0]
 8006c18:	062e      	lsls	r6, r5, #24
 8006c1a:	f100 0304 	add.w	r3, r0, #4
 8006c1e:	d50a      	bpl.n	8006c36 <_printf_i+0xce>
 8006c20:	6805      	ldr	r5, [r0, #0]
 8006c22:	600b      	str	r3, [r1, #0]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	da03      	bge.n	8006c30 <_printf_i+0xc8>
 8006c28:	232d      	movs	r3, #45	; 0x2d
 8006c2a:	426d      	negs	r5, r5
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c30:	230a      	movs	r3, #10
 8006c32:	485e      	ldr	r0, [pc, #376]	; (8006dac <_printf_i+0x244>)
 8006c34:	e019      	b.n	8006c6a <_printf_i+0x102>
 8006c36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c3a:	6805      	ldr	r5, [r0, #0]
 8006c3c:	600b      	str	r3, [r1, #0]
 8006c3e:	bf18      	it	ne
 8006c40:	b22d      	sxthne	r5, r5
 8006c42:	e7ef      	b.n	8006c24 <_printf_i+0xbc>
 8006c44:	680b      	ldr	r3, [r1, #0]
 8006c46:	6825      	ldr	r5, [r4, #0]
 8006c48:	1d18      	adds	r0, r3, #4
 8006c4a:	6008      	str	r0, [r1, #0]
 8006c4c:	0628      	lsls	r0, r5, #24
 8006c4e:	d501      	bpl.n	8006c54 <_printf_i+0xec>
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <_printf_i+0xf2>
 8006c54:	0669      	lsls	r1, r5, #25
 8006c56:	d5fb      	bpl.n	8006c50 <_printf_i+0xe8>
 8006c58:	881d      	ldrh	r5, [r3, #0]
 8006c5a:	2f6f      	cmp	r7, #111	; 0x6f
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2308      	moveq	r3, #8
 8006c60:	230a      	movne	r3, #10
 8006c62:	4852      	ldr	r0, [pc, #328]	; (8006dac <_printf_i+0x244>)
 8006c64:	2100      	movs	r1, #0
 8006c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6a:	6866      	ldr	r6, [r4, #4]
 8006c6c:	2e00      	cmp	r6, #0
 8006c6e:	bfa8      	it	ge
 8006c70:	6821      	ldrge	r1, [r4, #0]
 8006c72:	60a6      	str	r6, [r4, #8]
 8006c74:	bfa4      	itt	ge
 8006c76:	f021 0104 	bicge.w	r1, r1, #4
 8006c7a:	6021      	strge	r1, [r4, #0]
 8006c7c:	b90d      	cbnz	r5, 8006c82 <_printf_i+0x11a>
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d04d      	beq.n	8006d1e <_printf_i+0x1b6>
 8006c82:	4616      	mov	r6, r2
 8006c84:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c88:	fb03 5711 	mls	r7, r3, r1, r5
 8006c8c:	5dc7      	ldrb	r7, [r0, r7]
 8006c8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c92:	462f      	mov	r7, r5
 8006c94:	42bb      	cmp	r3, r7
 8006c96:	460d      	mov	r5, r1
 8006c98:	d9f4      	bls.n	8006c84 <_printf_i+0x11c>
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d10b      	bne.n	8006cb6 <_printf_i+0x14e>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	07df      	lsls	r7, r3, #31
 8006ca2:	d508      	bpl.n	8006cb6 <_printf_i+0x14e>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6861      	ldr	r1, [r4, #4]
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	bfde      	ittt	le
 8006cac:	2330      	movle	r3, #48	; 0x30
 8006cae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cb2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006cb6:	1b92      	subs	r2, r2, r6
 8006cb8:	6122      	str	r2, [r4, #16]
 8006cba:	464b      	mov	r3, r9
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	f8cd a000 	str.w	sl, [sp]
 8006cc4:	aa03      	add	r2, sp, #12
 8006cc6:	f7ff fedf 	bl	8006a88 <_printf_common>
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d14c      	bne.n	8006d68 <_printf_i+0x200>
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd2:	b004      	add	sp, #16
 8006cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd8:	4834      	ldr	r0, [pc, #208]	; (8006dac <_printf_i+0x244>)
 8006cda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cde:	680e      	ldr	r6, [r1, #0]
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ce6:	061f      	lsls	r7, r3, #24
 8006ce8:	600e      	str	r6, [r1, #0]
 8006cea:	d514      	bpl.n	8006d16 <_printf_i+0x1ae>
 8006cec:	07d9      	lsls	r1, r3, #31
 8006cee:	bf44      	itt	mi
 8006cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf4:	6023      	strmi	r3, [r4, #0]
 8006cf6:	b91d      	cbnz	r5, 8006d00 <_printf_i+0x198>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	f023 0320 	bic.w	r3, r3, #32
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	2310      	movs	r3, #16
 8006d02:	e7af      	b.n	8006c64 <_printf_i+0xfc>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f043 0320 	orr.w	r3, r3, #32
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	2378      	movs	r3, #120	; 0x78
 8006d0e:	4828      	ldr	r0, [pc, #160]	; (8006db0 <_printf_i+0x248>)
 8006d10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d14:	e7e3      	b.n	8006cde <_printf_i+0x176>
 8006d16:	065e      	lsls	r6, r3, #25
 8006d18:	bf48      	it	mi
 8006d1a:	b2ad      	uxthmi	r5, r5
 8006d1c:	e7e6      	b.n	8006cec <_printf_i+0x184>
 8006d1e:	4616      	mov	r6, r2
 8006d20:	e7bb      	b.n	8006c9a <_printf_i+0x132>
 8006d22:	680b      	ldr	r3, [r1, #0]
 8006d24:	6826      	ldr	r6, [r4, #0]
 8006d26:	1d1d      	adds	r5, r3, #4
 8006d28:	6960      	ldr	r0, [r4, #20]
 8006d2a:	600d      	str	r5, [r1, #0]
 8006d2c:	0635      	lsls	r5, r6, #24
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	d501      	bpl.n	8006d36 <_printf_i+0x1ce>
 8006d32:	6018      	str	r0, [r3, #0]
 8006d34:	e002      	b.n	8006d3c <_printf_i+0x1d4>
 8006d36:	0671      	lsls	r1, r6, #25
 8006d38:	d5fb      	bpl.n	8006d32 <_printf_i+0x1ca>
 8006d3a:	8018      	strh	r0, [r3, #0]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4616      	mov	r6, r2
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	e7ba      	b.n	8006cba <_printf_i+0x152>
 8006d44:	680b      	ldr	r3, [r1, #0]
 8006d46:	1d1a      	adds	r2, r3, #4
 8006d48:	600a      	str	r2, [r1, #0]
 8006d4a:	681e      	ldr	r6, [r3, #0]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4630      	mov	r0, r6
 8006d50:	6862      	ldr	r2, [r4, #4]
 8006d52:	f000 f82f 	bl	8006db4 <memchr>
 8006d56:	b108      	cbz	r0, 8006d5c <_printf_i+0x1f4>
 8006d58:	1b80      	subs	r0, r0, r6
 8006d5a:	6060      	str	r0, [r4, #4]
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	2300      	movs	r3, #0
 8006d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d66:	e7a8      	b.n	8006cba <_printf_i+0x152>
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	47d0      	blx	sl
 8006d72:	3001      	adds	r0, #1
 8006d74:	d0ab      	beq.n	8006cce <_printf_i+0x166>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	079b      	lsls	r3, r3, #30
 8006d7a:	d413      	bmi.n	8006da4 <_printf_i+0x23c>
 8006d7c:	68e0      	ldr	r0, [r4, #12]
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	4298      	cmp	r0, r3
 8006d82:	bfb8      	it	lt
 8006d84:	4618      	movlt	r0, r3
 8006d86:	e7a4      	b.n	8006cd2 <_printf_i+0x16a>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4640      	mov	r0, r8
 8006d90:	47d0      	blx	sl
 8006d92:	3001      	adds	r0, #1
 8006d94:	d09b      	beq.n	8006cce <_printf_i+0x166>
 8006d96:	3501      	adds	r5, #1
 8006d98:	68e3      	ldr	r3, [r4, #12]
 8006d9a:	9903      	ldr	r1, [sp, #12]
 8006d9c:	1a5b      	subs	r3, r3, r1
 8006d9e:	42ab      	cmp	r3, r5
 8006da0:	dcf2      	bgt.n	8006d88 <_printf_i+0x220>
 8006da2:	e7eb      	b.n	8006d7c <_printf_i+0x214>
 8006da4:	2500      	movs	r5, #0
 8006da6:	f104 0619 	add.w	r6, r4, #25
 8006daa:	e7f5      	b.n	8006d98 <_printf_i+0x230>
 8006dac:	08008001 	.word	0x08008001
 8006db0:	08008012 	.word	0x08008012

08006db4 <memchr>:
 8006db4:	4603      	mov	r3, r0
 8006db6:	b510      	push	{r4, lr}
 8006db8:	b2c9      	uxtb	r1, r1
 8006dba:	4402      	add	r2, r0
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	d101      	bne.n	8006dc6 <memchr+0x12>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e003      	b.n	8006dce <memchr+0x1a>
 8006dc6:	7804      	ldrb	r4, [r0, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	428c      	cmp	r4, r1
 8006dcc:	d1f6      	bne.n	8006dbc <memchr+0x8>
 8006dce:	bd10      	pop	{r4, pc}

08006dd0 <memmove>:
 8006dd0:	4288      	cmp	r0, r1
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	eb01 0402 	add.w	r4, r1, r2
 8006dd8:	d902      	bls.n	8006de0 <memmove+0x10>
 8006dda:	4284      	cmp	r4, r0
 8006ddc:	4623      	mov	r3, r4
 8006dde:	d807      	bhi.n	8006df0 <memmove+0x20>
 8006de0:	1e43      	subs	r3, r0, #1
 8006de2:	42a1      	cmp	r1, r4
 8006de4:	d008      	beq.n	8006df8 <memmove+0x28>
 8006de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dee:	e7f8      	b.n	8006de2 <memmove+0x12>
 8006df0:	4601      	mov	r1, r0
 8006df2:	4402      	add	r2, r0
 8006df4:	428a      	cmp	r2, r1
 8006df6:	d100      	bne.n	8006dfa <memmove+0x2a>
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e02:	e7f7      	b.n	8006df4 <memmove+0x24>

08006e04 <_free_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4605      	mov	r5, r0
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d043      	beq.n	8006e94 <_free_r+0x90>
 8006e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e10:	1f0c      	subs	r4, r1, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bfb8      	it	lt
 8006e16:	18e4      	addlt	r4, r4, r3
 8006e18:	f000 f8d0 	bl	8006fbc <__malloc_lock>
 8006e1c:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <_free_r+0x94>)
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	4610      	mov	r0, r2
 8006e22:	b933      	cbnz	r3, 8006e32 <_free_r+0x2e>
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6014      	str	r4, [r2, #0]
 8006e28:	4628      	mov	r0, r5
 8006e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e2e:	f000 b8cb 	b.w	8006fc8 <__malloc_unlock>
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	d90a      	bls.n	8006e4c <_free_r+0x48>
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	1862      	adds	r2, r4, r1
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bf01      	itttt	eq
 8006e3e:	681a      	ldreq	r2, [r3, #0]
 8006e40:	685b      	ldreq	r3, [r3, #4]
 8006e42:	1852      	addeq	r2, r2, r1
 8006e44:	6022      	streq	r2, [r4, #0]
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	6004      	str	r4, [r0, #0]
 8006e4a:	e7ed      	b.n	8006e28 <_free_r+0x24>
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	b10b      	cbz	r3, 8006e56 <_free_r+0x52>
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	d9fa      	bls.n	8006e4c <_free_r+0x48>
 8006e56:	6811      	ldr	r1, [r2, #0]
 8006e58:	1850      	adds	r0, r2, r1
 8006e5a:	42a0      	cmp	r0, r4
 8006e5c:	d10b      	bne.n	8006e76 <_free_r+0x72>
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	4401      	add	r1, r0
 8006e62:	1850      	adds	r0, r2, r1
 8006e64:	4283      	cmp	r3, r0
 8006e66:	6011      	str	r1, [r2, #0]
 8006e68:	d1de      	bne.n	8006e28 <_free_r+0x24>
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4401      	add	r1, r0
 8006e70:	6011      	str	r1, [r2, #0]
 8006e72:	6053      	str	r3, [r2, #4]
 8006e74:	e7d8      	b.n	8006e28 <_free_r+0x24>
 8006e76:	d902      	bls.n	8006e7e <_free_r+0x7a>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	e7d4      	b.n	8006e28 <_free_r+0x24>
 8006e7e:	6820      	ldr	r0, [r4, #0]
 8006e80:	1821      	adds	r1, r4, r0
 8006e82:	428b      	cmp	r3, r1
 8006e84:	bf01      	itttt	eq
 8006e86:	6819      	ldreq	r1, [r3, #0]
 8006e88:	685b      	ldreq	r3, [r3, #4]
 8006e8a:	1809      	addeq	r1, r1, r0
 8006e8c:	6021      	streq	r1, [r4, #0]
 8006e8e:	6063      	str	r3, [r4, #4]
 8006e90:	6054      	str	r4, [r2, #4]
 8006e92:	e7c9      	b.n	8006e28 <_free_r+0x24>
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	20001490 	.word	0x20001490

08006e9c <_malloc_r>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	1ccd      	adds	r5, r1, #3
 8006ea0:	f025 0503 	bic.w	r5, r5, #3
 8006ea4:	3508      	adds	r5, #8
 8006ea6:	2d0c      	cmp	r5, #12
 8006ea8:	bf38      	it	cc
 8006eaa:	250c      	movcc	r5, #12
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	4606      	mov	r6, r0
 8006eb0:	db01      	blt.n	8006eb6 <_malloc_r+0x1a>
 8006eb2:	42a9      	cmp	r1, r5
 8006eb4:	d903      	bls.n	8006ebe <_malloc_r+0x22>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	2000      	movs	r0, #0
 8006ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ebe:	f000 f87d 	bl	8006fbc <__malloc_lock>
 8006ec2:	4921      	ldr	r1, [pc, #132]	; (8006f48 <_malloc_r+0xac>)
 8006ec4:	680a      	ldr	r2, [r1, #0]
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	b99c      	cbnz	r4, 8006ef2 <_malloc_r+0x56>
 8006eca:	4f20      	ldr	r7, [pc, #128]	; (8006f4c <_malloc_r+0xb0>)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	b923      	cbnz	r3, 8006eda <_malloc_r+0x3e>
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f862 	bl	8006f9c <_sbrk_r>
 8006ed8:	6038      	str	r0, [r7, #0]
 8006eda:	4629      	mov	r1, r5
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f85d 	bl	8006f9c <_sbrk_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d123      	bne.n	8006f2e <_malloc_r+0x92>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	4630      	mov	r0, r6
 8006eea:	6033      	str	r3, [r6, #0]
 8006eec:	f000 f86c 	bl	8006fc8 <__malloc_unlock>
 8006ef0:	e7e3      	b.n	8006eba <_malloc_r+0x1e>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	1b5b      	subs	r3, r3, r5
 8006ef6:	d417      	bmi.n	8006f28 <_malloc_r+0x8c>
 8006ef8:	2b0b      	cmp	r3, #11
 8006efa:	d903      	bls.n	8006f04 <_malloc_r+0x68>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	441c      	add	r4, r3
 8006f00:	6025      	str	r5, [r4, #0]
 8006f02:	e004      	b.n	8006f0e <_malloc_r+0x72>
 8006f04:	6863      	ldr	r3, [r4, #4]
 8006f06:	42a2      	cmp	r2, r4
 8006f08:	bf0c      	ite	eq
 8006f0a:	600b      	streq	r3, [r1, #0]
 8006f0c:	6053      	strne	r3, [r2, #4]
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f85a 	bl	8006fc8 <__malloc_unlock>
 8006f14:	f104 000b 	add.w	r0, r4, #11
 8006f18:	1d23      	adds	r3, r4, #4
 8006f1a:	f020 0007 	bic.w	r0, r0, #7
 8006f1e:	1ac2      	subs	r2, r0, r3
 8006f20:	d0cc      	beq.n	8006ebc <_malloc_r+0x20>
 8006f22:	1a1b      	subs	r3, r3, r0
 8006f24:	50a3      	str	r3, [r4, r2]
 8006f26:	e7c9      	b.n	8006ebc <_malloc_r+0x20>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7cc      	b.n	8006ec8 <_malloc_r+0x2c>
 8006f2e:	1cc4      	adds	r4, r0, #3
 8006f30:	f024 0403 	bic.w	r4, r4, #3
 8006f34:	42a0      	cmp	r0, r4
 8006f36:	d0e3      	beq.n	8006f00 <_malloc_r+0x64>
 8006f38:	1a21      	subs	r1, r4, r0
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f000 f82e 	bl	8006f9c <_sbrk_r>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1dd      	bne.n	8006f00 <_malloc_r+0x64>
 8006f44:	e7cf      	b.n	8006ee6 <_malloc_r+0x4a>
 8006f46:	bf00      	nop
 8006f48:	20001490 	.word	0x20001490
 8006f4c:	20001494 	.word	0x20001494

08006f50 <_realloc_r>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	4607      	mov	r7, r0
 8006f54:	4614      	mov	r4, r2
 8006f56:	460e      	mov	r6, r1
 8006f58:	b921      	cbnz	r1, 8006f64 <_realloc_r+0x14>
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f60:	f7ff bf9c 	b.w	8006e9c <_malloc_r>
 8006f64:	b922      	cbnz	r2, 8006f70 <_realloc_r+0x20>
 8006f66:	f7ff ff4d 	bl	8006e04 <_free_r>
 8006f6a:	4625      	mov	r5, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	f000 f830 	bl	8006fd4 <_malloc_usable_size_r>
 8006f74:	42a0      	cmp	r0, r4
 8006f76:	d20f      	bcs.n	8006f98 <_realloc_r+0x48>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f7ff ff8e 	bl	8006e9c <_malloc_r>
 8006f80:	4605      	mov	r5, r0
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d0f2      	beq.n	8006f6c <_realloc_r+0x1c>
 8006f86:	4631      	mov	r1, r6
 8006f88:	4622      	mov	r2, r4
 8006f8a:	f7ff fbeb 	bl	8006764 <memcpy>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4638      	mov	r0, r7
 8006f92:	f7ff ff37 	bl	8006e04 <_free_r>
 8006f96:	e7e9      	b.n	8006f6c <_realloc_r+0x1c>
 8006f98:	4635      	mov	r5, r6
 8006f9a:	e7e7      	b.n	8006f6c <_realloc_r+0x1c>

08006f9c <_sbrk_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4d05      	ldr	r5, [pc, #20]	; (8006fb8 <_sbrk_r+0x1c>)
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fa ffee 	bl	8001f88 <_sbrk>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_sbrk_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_sbrk_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20001624 	.word	0x20001624

08006fbc <__malloc_lock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_lock+0x8>)
 8006fbe:	f000 b811 	b.w	8006fe4 <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	2000162c 	.word	0x2000162c

08006fc8 <__malloc_unlock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_unlock+0x8>)
 8006fca:	f000 b80c 	b.w	8006fe6 <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	2000162c 	.word	0x2000162c

08006fd4 <_malloc_usable_size_r>:
 8006fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd8:	1f18      	subs	r0, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbc      	itt	lt
 8006fde:	580b      	ldrlt	r3, [r1, r0]
 8006fe0:	18c0      	addlt	r0, r0, r3
 8006fe2:	4770      	bx	lr

08006fe4 <__retarget_lock_acquire_recursive>:
 8006fe4:	4770      	bx	lr

08006fe6 <__retarget_lock_release_recursive>:
 8006fe6:	4770      	bx	lr

08006fe8 <sqrt>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	f000 f827 	bl	8007040 <__ieee754_sqrt>
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <sqrt+0x54>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	d019      	beq.n	8007034 <sqrt+0x4c>
 8007000:	4632      	mov	r2, r6
 8007002:	463b      	mov	r3, r7
 8007004:	4630      	mov	r0, r6
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 fcf8 	bl	80009fc <__aeabi_dcmpun>
 800700c:	b990      	cbnz	r0, 8007034 <sqrt+0x4c>
 800700e:	2200      	movs	r2, #0
 8007010:	2300      	movs	r3, #0
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 fcc9 	bl	80009ac <__aeabi_dcmplt>
 800701a:	b158      	cbz	r0, 8007034 <sqrt+0x4c>
 800701c:	f7ff fb78 	bl	8006710 <__errno>
 8007020:	2321      	movs	r3, #33	; 0x21
 8007022:	2200      	movs	r2, #0
 8007024:	6003      	str	r3, [r0, #0]
 8007026:	2300      	movs	r3, #0
 8007028:	4610      	mov	r0, r2
 800702a:	4619      	mov	r1, r3
 800702c:	f7f9 fb76 	bl	800071c <__aeabi_ddiv>
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	4620      	mov	r0, r4
 8007036:	4629      	mov	r1, r5
 8007038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703a:	bf00      	nop
 800703c:	20000094 	.word	0x20000094

08007040 <__ieee754_sqrt>:
 8007040:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007194 <__ieee754_sqrt+0x154>
 8007044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007048:	ea3c 0c01 	bics.w	ip, ip, r1
 800704c:	460b      	mov	r3, r1
 800704e:	4606      	mov	r6, r0
 8007050:	460d      	mov	r5, r1
 8007052:	460a      	mov	r2, r1
 8007054:	4607      	mov	r7, r0
 8007056:	4604      	mov	r4, r0
 8007058:	d10e      	bne.n	8007078 <__ieee754_sqrt+0x38>
 800705a:	4602      	mov	r2, r0
 800705c:	f7f9 fa34 	bl	80004c8 <__aeabi_dmul>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4630      	mov	r0, r6
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 f878 	bl	800015c <__adddf3>
 800706c:	4606      	mov	r6, r0
 800706e:	460d      	mov	r5, r1
 8007070:	4630      	mov	r0, r6
 8007072:	4629      	mov	r1, r5
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007078:	2900      	cmp	r1, #0
 800707a:	dc0d      	bgt.n	8007098 <__ieee754_sqrt+0x58>
 800707c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007080:	ea5c 0707 	orrs.w	r7, ip, r7
 8007084:	d0f4      	beq.n	8007070 <__ieee754_sqrt+0x30>
 8007086:	b139      	cbz	r1, 8007098 <__ieee754_sqrt+0x58>
 8007088:	4602      	mov	r2, r0
 800708a:	f7f9 f865 	bl	8000158 <__aeabi_dsub>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	f7f9 fb43 	bl	800071c <__aeabi_ddiv>
 8007096:	e7e9      	b.n	800706c <__ieee754_sqrt+0x2c>
 8007098:	1512      	asrs	r2, r2, #20
 800709a:	d074      	beq.n	8007186 <__ieee754_sqrt+0x146>
 800709c:	2000      	movs	r0, #0
 800709e:	07d5      	lsls	r5, r2, #31
 80070a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a4:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80070a8:	bf5e      	ittt	pl
 80070aa:	0fe3      	lsrpl	r3, r4, #31
 80070ac:	0064      	lslpl	r4, r4, #1
 80070ae:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80070b2:	0fe3      	lsrs	r3, r4, #31
 80070b4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80070b8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80070bc:	2516      	movs	r5, #22
 80070be:	4601      	mov	r1, r0
 80070c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070c4:	1076      	asrs	r6, r6, #1
 80070c6:	0064      	lsls	r4, r4, #1
 80070c8:	188f      	adds	r7, r1, r2
 80070ca:	429f      	cmp	r7, r3
 80070cc:	bfde      	ittt	le
 80070ce:	1bdb      	suble	r3, r3, r7
 80070d0:	18b9      	addle	r1, r7, r2
 80070d2:	1880      	addle	r0, r0, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	3d01      	subs	r5, #1
 80070d8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80070dc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80070e0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80070e4:	d1f0      	bne.n	80070c8 <__ieee754_sqrt+0x88>
 80070e6:	462a      	mov	r2, r5
 80070e8:	f04f 0e20 	mov.w	lr, #32
 80070ec:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80070f0:	428b      	cmp	r3, r1
 80070f2:	eb07 0c05 	add.w	ip, r7, r5
 80070f6:	dc02      	bgt.n	80070fe <__ieee754_sqrt+0xbe>
 80070f8:	d113      	bne.n	8007122 <__ieee754_sqrt+0xe2>
 80070fa:	45a4      	cmp	ip, r4
 80070fc:	d811      	bhi.n	8007122 <__ieee754_sqrt+0xe2>
 80070fe:	f1bc 0f00 	cmp.w	ip, #0
 8007102:	eb0c 0507 	add.w	r5, ip, r7
 8007106:	da43      	bge.n	8007190 <__ieee754_sqrt+0x150>
 8007108:	2d00      	cmp	r5, #0
 800710a:	db41      	blt.n	8007190 <__ieee754_sqrt+0x150>
 800710c:	f101 0801 	add.w	r8, r1, #1
 8007110:	1a5b      	subs	r3, r3, r1
 8007112:	4641      	mov	r1, r8
 8007114:	45a4      	cmp	ip, r4
 8007116:	bf88      	it	hi
 8007118:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800711c:	eba4 040c 	sub.w	r4, r4, ip
 8007120:	443a      	add	r2, r7
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	f1be 0e01 	subs.w	lr, lr, #1
 8007128:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800712c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007130:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007134:	d1dc      	bne.n	80070f0 <__ieee754_sqrt+0xb0>
 8007136:	4323      	orrs	r3, r4
 8007138:	d006      	beq.n	8007148 <__ieee754_sqrt+0x108>
 800713a:	1c54      	adds	r4, r2, #1
 800713c:	bf0b      	itete	eq
 800713e:	4672      	moveq	r2, lr
 8007140:	3201      	addne	r2, #1
 8007142:	3001      	addeq	r0, #1
 8007144:	f022 0201 	bicne.w	r2, r2, #1
 8007148:	1043      	asrs	r3, r0, #1
 800714a:	07c1      	lsls	r1, r0, #31
 800714c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007150:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007154:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007158:	bf48      	it	mi
 800715a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800715e:	4610      	mov	r0, r2
 8007160:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007164:	e782      	b.n	800706c <__ieee754_sqrt+0x2c>
 8007166:	0ae3      	lsrs	r3, r4, #11
 8007168:	3915      	subs	r1, #21
 800716a:	0564      	lsls	r4, r4, #21
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0fa      	beq.n	8007166 <__ieee754_sqrt+0x126>
 8007170:	02de      	lsls	r6, r3, #11
 8007172:	d50a      	bpl.n	800718a <__ieee754_sqrt+0x14a>
 8007174:	f1c2 0020 	rsb	r0, r2, #32
 8007178:	fa24 f000 	lsr.w	r0, r4, r0
 800717c:	1e55      	subs	r5, r2, #1
 800717e:	4094      	lsls	r4, r2
 8007180:	4303      	orrs	r3, r0
 8007182:	1b4a      	subs	r2, r1, r5
 8007184:	e78a      	b.n	800709c <__ieee754_sqrt+0x5c>
 8007186:	4611      	mov	r1, r2
 8007188:	e7f0      	b.n	800716c <__ieee754_sqrt+0x12c>
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	3201      	adds	r2, #1
 800718e:	e7ef      	b.n	8007170 <__ieee754_sqrt+0x130>
 8007190:	4688      	mov	r8, r1
 8007192:	e7bd      	b.n	8007110 <__ieee754_sqrt+0xd0>
 8007194:	7ff00000 	.word	0x7ff00000

08007198 <_init>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr

080071a4 <_fini>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr
